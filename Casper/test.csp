-- CSP script produced using Casper version 2.0

-- -- Needham Schroeder Public Key Protocol, 3 message version
-- 
-- #Free variables
-- 
-- a, b : Agent
-- na, nb : Nonce
-- PK : Agent -> PublicKey
-- SK : Agent -> SecretKey
-- InverseKeys = (PK, SK)
-- 
-- #Processes
-- 
-- INITIATOR(a,na) knows PK, SK(a)
-- RESPONDER(b,nb) knows PK, SK(b)
-- 
-- #Protocol description
-- 
-- 0.    -> a : b
-- 1.  a -> b : {na, a}{PK(b)}
-- 2.  b -> a : {na, nb}{PK(a)}
-- 3.  a -> b : {nb}{PK(b)} 
-- 
-- #Specification
-- 
-- -- PASS
-- StrongSecret(a, na, [b])
-- -- PASS
-- StrongSecret(a, nb, [b])
-- -- FAIL
-- Secret(b, nb, [a])
-- -- FAIL
-- Secret(b, na, [a])
-- 
-- -- PASS
-- Aliveness(a, b)
-- -- FAIL
-- WeakAgreement(a, b)
-- -- FAIL
-- NonInjectiveAgreement(a, b, [na, nb])
-- -- FAIL
-- Agreement(a, b, [na,nb])
-- -- PASS
-- Agreement(b, a, [na,nb])
-- 
-- #Actual variables
-- 
-- A, B, I : Agent
-- Na, Nb, Nm : Nonce
-- 
-- #Functions
-- 
-- symbolic PK, SK
-- 
-- #System
-- 
-- INITIATOR(A, Na)
-- RESPONDER(B, Nb)
-- -- WithdrawOption = True
-- 
-- #Intruder Information
-- 
-- Intruder = I
-- IntruderKnowledge = {A, B, I, Nm, PK, SK(I)}
-- 

-- ************************************************************************
-- *                                Types                                 *
-- ************************************************************************

-- Main datatype, representing all possible messages

datatype Encryption =
  A | B | I | Na | Nb | Nm | Garbage | PK__.Agent | SK__.Agent | 
  Sq.Seq(Encryption) | Encrypt.(ALL_KEYS,Seq(Encryption)) | 
  Hash.(HashFunction, Seq(Encryption)) | Xor.(Encryption, Encryption)

-- All keys and hashfunctions in the system

ALL_KEYS :: {Encryption}
ALL_KEYS = PublicKey

ASYMMETRIC_KEYS = {k_, inverse(k_) | k_ <- ALL_KEYS, k_!=inverse(k_)}
HashFunction :: {Encryption}
HashFunction = {}

-- All atoms in the system

ATOM = {A, B, I, Na, Nb, Nm, Garbage}

-- Some standard functions

channel dummyrun_
RUN(X_) = 
  let drun = dummyrun_ -> drun
  within drun[[dummyrun_ <- x_ | x_ <- X_]]

encrypt(m_,k_) = Encrypt.(k_,m_)
decrypt(Encrypt.(k1_,m_),k_) = if k_ == inverse(k1_) then m_ else <Garbage>
decrypt(_,_) = <Garbage>
decryptable(Encrypt.(k1_,m_),k_) = k_ == inverse(k1_) 
decryptable(_,_) = false
nth(ms_,n_) = if n_ == 1 then head(ms_) else nth(tail(ms_), n_ - 1)

-- add Garbage to a set that contains and encryption,
-- hash function application of Vernam encryption

addGarbage_(S_) =
  if S_=={} then {Garbage}
  else Union({S_, {Garbage | Encrypt._ <- S_}, 
             {Garbage | Hash._ <- S_},
             {Garbage | Xor._ <- S_}})

-- Definitions of user supplied functions

PK(arg_1_) = PK__.(arg_1_)
SK(arg_1_) = SK__.(arg_1_)

-- Inverses of functions

inverse(PK__.arg_) = SK__.arg_
inverse(SK__.arg_) = PK__.arg_

-- Types in system

Agent = {A, B, I}
Nonce = {Na, Nb, Nm}
PublicKey = {PK(arg_1_) | arg_1_ <- Agent}
SecretKey = {SK(arg_1_) | arg_1_ <- Agent}


-- ************************************************************************
-- *                               Messages                               *
-- ************************************************************************

-- Message labels

datatype Labels =
  Msg1 | Msg2 | Msg3 | Env0

MSG_BODY = {ALGEBRA_M::applyRenaming(m_) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO}

-- Type of principals

ALL_PRINCIPALS = Agent

INTRUDER = I

HONEST = diff(ALL_PRINCIPALS, {INTRUDER})

-- Channel declarations

INPUT_MSG = SYSTEM_M::INPUT_MSG
OUTPUT_MSG = SYSTEM_M::OUTPUT_MSG
DIRECT_MSG = SYSTEM_M::DIRECT_MSG
ENV_MSG :: {(Labels, Encryption, <Encryption>)}
ENV_MSG = SYSTEM_M::ENV_MSG

channel receive: ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_MSG
channel send: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_MSG
channel env : ALL_PRINCIPALS.ENV_MSG
channel error
channel start, close : HONEST.HONEST_ROLE

channel leak : addGarbage_(ALL_SECRETS)
-- Roles of agents

datatype ROLE = INITIATOR_role | RESPONDER_role

HONEST_ROLE = ROLE

-- Secrets in the protocol

ALL_SECRETS_0 = Nonce
ALL_SECRETS = addGarbage_(ALGEBRA_M::applyRenamingToSet(ALL_SECRETS_0))

-- Define type of signals, and declare signal channel

datatype Signal = 
  Claim_Secret.ALL_PRINCIPALS.ALL_SECRETS.Set(ALL_PRINCIPALS) |
  Running1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS |
  Commit1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS |
  RunCom1.ALL_PRINCIPALS.ALL_PRINCIPALS |
  Running2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS |
  Commit2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS |
  RunCom2.ALL_PRINCIPALS.ALL_PRINCIPALS |
  Running3.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  Commit3.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  RunCom3.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce.Nonce.Nonce |
  Running4.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  Commit4.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  RunCom4.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce.Nonce.Nonce |
  Running5.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  Commit5.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  RunCom5.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce.Nonce.Nonce

channel signal : Signal

Fact_1 = 
  Union({
    {Garbage},
    Agent,
    Nonce,
    PublicKey,
    SecretKey,
    {Encrypt.(PK__.(b), <na, a>) |
       a <- Agent, b <- Agent, na <- Nonce},
    {Encrypt.(PK__.(a), <na, nb>) |
       a <- Agent, na <- Nonce, nb <- Nonce},
    {Encrypt.(PK__.(b), <nb>) |
       b <- Agent, nb <- Nonce}
  })

external relational_inverse_image
external relational_image
transparent chase
transparent sbisim

-- ************************************************************************
-- *                            Honest Agents                             *
-- ************************************************************************

module SYSTEM_M

  -- types of messages sent and received by agents, as they are
  -- considered by those agents

  input_proj((l_,m_,se_,re_)) = (l_,m_,re_)
  rmb_input_proj((l_,m_,se_,re_)) = ALGEBRA_M::rmb((l_,m_,re_))
  output_proj((l_,m_,se_,re_)) = (l_,m_,se_)

  INPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  INPUT_INT_MSG = 
    Union({INPUT_INT_MSG1, INPUT_INT_MSG2, INPUT_INT_MSG3})

  OUTPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  OUTPUT_INT_MSG = 
    Union({OUTPUT_INT_MSG1, OUTPUT_INT_MSG2, OUTPUT_INT_MSG3})

  -- INITIATOR

  INITIATOR_0(a, na) =
    [] b : Agent @ env_I.a.(Env0, b,<na, b>) ->
    output.a.b.(Msg1, Encrypt.(PK__.(b), <na, a>),<>) ->
    [] nb : Nonce @ 
      input.b.a.(Msg2, Encrypt.(PK__.(a), <na, nb>),<nb>) ->
    output.a.b.(Msg3, Encrypt.(PK__.(b), <nb>),<na, nb>) ->
    SKIP

  INITIATOR_1(a, na) = INITIATOR_0(a, na)

  INITIATOR(a, na) =
    INITIATOR_1(a, na)
      [[input.b.a.(l_,m_,re_) <- receive.b.a.ALGEBRA_M::rmb((l_,m_,re_)) |
          b <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO2]]
      [[output.a.b.(l_,m_,se_) <- send.a.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO1]]
      [[output.a.b.(l_,m_,se_) <- send.a.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO3]]
      [[env_I.a.m_ <- env.a.ALGEBRA_M::rmb(m_) |
          m_ <- ENV_INT_MSG0]]

  -- RESPONDER

  RESPONDER_0(b, nb) =
    [] a : Agent @ [] na : Nonce @ 
      input.a.b.(Msg1, Encrypt.(PK__.(b), <na, a>),<>) ->
    output.b.a.(Msg2, Encrypt.(PK__.(a), <na, nb>),<na, nb>) ->
    input.a.b.(Msg3, Encrypt.(PK__.(b), <nb>),<na, nb>) ->
    SKIP

  RESPONDER_1(b, nb) = RESPONDER_0(b, nb)

  RESPONDER(b, nb) =
    RESPONDER_1(b, nb)
      [[input.a.b.(l_,m_,re_) <- receive.a.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          a <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO1]]
      [[input.a.b.(l_,m_,re_) <- receive.a.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          a <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO3]]
      [[output.b.a.(l_,m_,se_) <- send.b.a.ALGEBRA_M::rmb((l_,m_,se_)) |
          a <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO2]]

  -- Process representing A

  Alpha_INITIATOR_A = 
    Union({
      {|env.A.m_ | m_ <- ENV_MSG0|},
      {|send.A.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG1|},
      {|send.A.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG3|},
      {|receive.A_.A.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG2|}
    })

  INITIATOR_A = (INITIATOR(A, Na) ; STOP)

  Alpha_A = 
    Union({
      {|env.A|},
      {|send.A.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.A.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG2|}
    })

  AGENT_A =
    (INITIATOR_A [Alpha_INITIATOR_A || {} ] STOP)

  -- Process representing B

  Alpha_RESPONDER_B = 
    Union({
      {|send.B.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG2|},
      {|receive.A_.B.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG1|},
      {|receive.A_.B.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3|}
    })

  RESPONDER_B = (RESPONDER(B, Nb) ; STOP)

  Alpha_B = 
    Union({
      {|env.B|},
      {|send.B.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.B.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG1|},
      {|receive.A_.B.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3|}
    })

  AGENT_B =
    (RESPONDER_B [Alpha_RESPONDER_B || {} ] STOP)

exports

  -- Messages as they appear on the network; each messages is renamed
  -- (by rmb) to the representative member of its equivalence class

  INPUT_MSG1 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG1}
  INPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG2}
  INPUT_MSG3 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG3}

  OUTPUT_MSG1 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG1}
  OUTPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG2}
  OUTPUT_MSG3 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG3}

  DIRECT_MSG1 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO1}
  DIRECT_MSG2 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO2}
  DIRECT_MSG3 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO3}

  -- Environmental messages

  ENV_INT_MSG0 :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG0 = 
    {(Env0, b, <na, b>) |
       b <- Agent, na <- Nonce}

  ENV_MSG0 = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG0}

  ENV_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG = ENV_INT_MSG0

  -- information about messages sent and received by agents, including
  -- extras fields for both agents

  INT_MSG_INFO1 = 
    {(Msg1, Encrypt.(PK__.(b), <na, a>), <>, <>) |
       a <- Agent, b <- Agent, na <- Nonce}
  INT_MSG_INFO2 = 
    {(Msg2, Encrypt.(PK__.(a), <na, nb>), <na, nb>, <nb>) |
       na <- Nonce, nb <- Nonce, a <- Agent}
  INT_MSG_INFO3 = 
    {(Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>, <na_X_, nb>) |
       na <- Nonce, nb <- Nonce, na_X_ <- Nonce, b <- Agent}

  ENV_MSG = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG}

  INT_MSG_INFO :: {(Labels, Encryption, <Encryption>, <Encryption>)}
  INT_MSG_INFO = Union({INT_MSG_INFO1, INT_MSG_INFO2, INT_MSG_INFO3})
  INPUT_INT_MSG1 = { input_proj(mt_) | mt_ <- INT_MSG_INFO1 }
  INPUT_INT_MSG2 = { input_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  INPUT_INT_MSG3 = { input_proj(mt_) | mt_ <- INT_MSG_INFO3 }

  INPUT_MSG = Union({INPUT_MSG1, INPUT_MSG2, INPUT_MSG3})
  OUTPUT_INT_MSG1 = { output_proj(mt_) | mt_ <- INT_MSG_INFO1 }
  OUTPUT_INT_MSG2 = { output_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  OUTPUT_INT_MSG3 = { output_proj(mt_) | mt_ <- INT_MSG_INFO3 }

  OUTPUT_MSG = Union({OUTPUT_MSG1, OUTPUT_MSG2, OUTPUT_MSG3})
  DIRECT_MSG = Union({DIRECT_MSG1, DIRECT_MSG2, DIRECT_MSG3})

  channel input:ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_INT_MSG
  channel output: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_INT_MSG
  channel env_I : ALL_PRINCIPALS.ENV_INT_MSG

  -- Complete system

  SYSTEM_0 =
    (AGENT_A
      [Alpha_A||Alpha_B]
    AGENT_B)

endmodule

-- ************************************************************************
-- *                               Algebra                                *
-- ************************************************************************

module ALGEBRA_M

  -- Algebraic laws, defined as a set of pairs

  laws = {(Garbage, Garbage)}

  -- Calculate transitive closure of algebraic laws, and select
  -- representative member of each equivalence class

  external mtransclose
  renaming = mtransclose(laws, Fact_1)
  ren = relational_inverse_image(renaming)

  -- function that renames non-sequential fact to representative member

  applyRenaming0(a_) =
    let S_ = ren(a_)
    within if card(S_)==0 then a_ else elsing(S_)

  elsing({x_}) = x_

  domain = {a_ | (_,a_) <- renaming}

exports

  -- function that renames arbitrary fact to representative member

  applyRenaming(Sq.ms_) =
    if member(Sq.ms_, Fact_1) then applyRenaming0(Sq.ms_) 
    else Sq.<applyRenaming0(m_) | m_ <- ms_>
  applyRenaming(a_) = applyRenaming0(a_)

  -- function that renames (label, fact, extras) triples

  rmb((l_,m_,extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(extras_))
  rmb4((l_,m_,s_extras_,r_extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(s_extras_), 
     applyRenamingToSeq(r_extras_))

  -- lift renaming to sets and to deductions

  applyRenamingToSet(X_) =
    union({elsing(ren(a_)) | a_ <- inter(X_,domain)},  diff(X_, domain))

  applyRenamingToSeq(X_) = <applyRenaming(e_) | e_ <- X_>

  applyRenamingToDeductions(S_) =
    {(applyRenaming0(f_), applyRenamingToSet(X_)) | (f_,X_) <- S_}

endmodule

-- ************************************************************************
-- *                             The Intruder                             *
-- ************************************************************************

module INTRUDER_M

  -- Intruder's deductions

  unSq_ (Sq.ms_) = set(ms_)
  unSq_ (m_) = {m_}

  unknown_(S_) = diff(S_, IK0)

  Base_Deductions_ =
    Union({SqDeductions, UnSqDeductions, 
           EncryptionDeductions, DecryptionDeductions,
           VernEncDeductions, VernDecDeductions, 
           FnAppDeductions, HashDeductions, UserDeductions})

  SqDeductions =
    {(Sq.fs_, unknown_(set(fs_))) | Sq.fs_ <- Fact_1}

  UnSqDeductions =
    {(f_, unknown_({Sq.fs_})) | Sq.fs_ <- Fact_1, f_ <- unknown_(set(fs_))}

  EncryptionDeductions =
    {(Encrypt.(k_,fs_), unknown_(union({k_}, set(fs_)))) | 
        Encrypt.(k_,fs_) <- Fact_1}

  DecryptionDeductions =
    {(f_, unknown_({Encrypt.(k_,fs_), inverse(k_)})) |
        Encrypt.(k_,fs_) <- Fact_1, f_ <- unknown_(set(fs_))}

  VernEncDeductions =
    {(Xor.(m1_,m2_), unknown_(union(unSq_(m1_), unSq_(m2_)))) | 
        Xor.(m1_,m2_) <- Fact_1}

  VernDecDeductions =
      {(m11_, union(unknown_(unSq_(m2_)), {Xor.(m1_,m2_)})) | 
         Xor.(m1_,m2_) <- Fact_1, m11_ <- unSq_(m1_)}

  HashDeductions = {(Hash.(f_, ms_), set(ms_)) | Hash.(f_, ms_) <- Fact_1}

  UserDeductions = {}

  FnAppDeductions = 
    {(PK__.arg_1_, unknown_({arg_1_})) |
        PK__.arg_1_ <- Fact_1}

  -- close up intruder's initial knowledge under deductions;
  -- calculate which facts cannot be learnt

  components_(Sq.ms_) = 
    if member(Sq.ms_, Fact_1) then {Sq.ms_} else set(ms_)
  components_(m_) = {m_}

  Seeable_ = 
    Union({unknown_(components_(m_)) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO})

  (IK1, Deductions_, KnowableFact_) = 
    Close_(ALGEBRA_M::applyRenamingToSet(IK0), 
           ALGEBRA_M::applyRenamingToDeductions(Base_Deductions), 
           ALGEBRA_M::applyRenamingToSet(Fact_1))

  LearnableFact = diff(KnowableFact, IK1)

  -- The intruder

  -- * leak is used to signal that a possible secret has been learnt
  -- * hear and say are used to represent hearing or saying a message
  -- * infer(f,fs) represent deducing fact f from the set of facts fs

  -- Component of intruder for currently unknown fact f_:
  -- * ms_ is the set of messages that contain f_ at the top level
  -- * fss_ is the set of sets of facts from which f_ can be deduced
  -- * ds_ is the set of deductions that use f_

  IGNORANT(f_,ms_,fss_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,ds_)
    []
    ([] fs_ : fss_, not(member(f_,fs_)) @ 
        infer.(f_,fs_) -> KNOWS(f_,ms_,ds_))

  -- Component of intruder for known fact f_

  KNOWS(f_,ms_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,ds_)
    []
    say?m_:ms_ -> KNOWS(f_,ms_,ds_)
    [] 
    ([] ded@@(f1_,fs_) : ds_, f1_!=f_ @ infer.ded -> KNOWS(f_,ms_,ds_))
    []
    member(f_,ALL_SECRETS) & leak.f_ -> KNOWS(f_,ms_,ds_)

  -- Alphabet of this component

  AlphaL(f_,ms_,fss_,ds_) =
    Union({(if member(f_,ALL_SECRETS) then {leak.f_} else {}),
           {hear.m_, say.m_ | m_ <- ms_},
           {infer.(f_,fs_) | fs_ <- fss_},
           {infer.(f1_,fs_) | (f1_,fs_) <- ds_}
         })

  -- Set of all (f_, ms_, fss_, ds_) for which intruder components 
  -- must be built

  f_ms_fss_ds_s(Deductions,LearnableFact) = 
    let rid_ = relational_image(Deductions)
        msf_ = relational_image({(f_, m_) | m_ <- MSG_BODY, f_ <- unSq_(m_)})
        xsf_ = relational_image({(f_, x_) | x_@@(_,fs_) <- Deductions,
                                            f_ <- fs_})
    within {(f_, msf_(f_), rid_(f_), xsf_(f_)) | f_ <- LearnableFact}

  -- Rename events appropriately

  BUILD_INTRUDER_0(INTRUDER_0) =
    ((chase(INTRUDER_0)
      [[ hear.m_ <- hear.m_, hear.m_ <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3
         }), 
         A_ <- diff(SenderType(l_),{I}), 
         B_ <- ReceiverType(l_) ]] 
     [|{| hear |}|] STOP)
      [[ say.m_ <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3
         }), 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 
     [|{| say |}|] STOP)

  -- Add in facts that are known initially

  SAY_KNOWN_0(IK1) = 
    (inter(IK1, ALL_SECRETS) != {} & dummy_leak -> SAY_KNOWN_0(IK1)) 
    [] dummy_send -> SAY_KNOWN_0(IK1) 
    [] dummy_receive -> SAY_KNOWN_0(IK1) 

  SAY_KNOWN(IK1) =
    SAY_KNOWN_0(IK1)
      [[ dummy_leak <- leak.f_ | f_ <- inter(IK1, ALL_SECRETS) ]]
      [[ dummy_send <- dummy_send, dummy_send <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3
         }), components_(m_) <= IK1, 
         A_ <- diff(SenderType(l_),{I}), 
         B_ <- ReceiverType(l_) ]] 
      [[ dummy_receive <- dummy_receive, dummy_receive <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3
         }), components_(m_) <= IK1, 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 

  STOP_SET = { dummy_send, dummy_receive }

exports

  -- Types of sender and receiver of each message

  SenderType (Msg1) = Agent
  SenderType (Msg2) = Agent
  SenderType (Msg3) = Agent

  ReceiverType(Msg1) = Agent
  ReceiverType(Msg2) = Agent
  ReceiverType(Msg3) = Agent

  -- Intruder's initial knowledge

  IK0 = {A, B, I, Nm, SK__.(I), Garbage}

  Deductions = Deductions_

  Base_Deductions = Base_Deductions_

  Close_(IK_, ded_, fact_) =
    CloseButNotFacts_(IK_, ded_, fact_, { })

  -- The method below is used to calculate IK1 and Deductions and is important
  -- when temporal checks are being done. If no check was done on f being
  -- in Facts then the infer event corresponding to a intruder send event may be hidden.
  CloseButNotFacts_(IK_, ded_, fact_, excludedFacts_) =
    let IK1_ = 
          union(IK_, {f_ | (f_,fs_) <- ded_, fs_ <= IK_ and not member(f_,excludedFacts_)})
        ded1_ = 
          {(f_,fs_) | (f_,fs_) <- ded_, not (member(f_,IK_)),
                      fs_ <= fact_}
        fact1_ = Union({IK_, {f_ | (f_,fs_) <- ded_}, Seeable_})
    within
    if card(IK_)==card(IK1_) and card(ded_)==card(ded1_)
       and card(fact_)==card(fact1_)
    then (IK_, {(f_,diff(fs_,IK_)) | (f_,fs_) <- ded_}, fact_)
    else Close_(IK1_, ded1_, fact1_)

KnowableFact = KnowableFact_ 
  -- Put components together in parallel
  INTRUDER_00(Deductions,LearnableFact) = 
    (|| (f_,ms_,fss_,ds_) : f_ms_fss_ds_s(Deductions,LearnableFact) @ 
         [AlphaL(f_,ms_,fss_,ds_)] IGNORANT(f_,ms_,fss_,ds_))

  INTRUDER_0 = INTRUDER_00(Deductions, LearnableFact) \ {|infer|}

  -- Set of all deductions that could occur
  COMBINED_DEDUCTIONS =
    let ds_ = INTRUDER_M::Deductions
    within -- Don't you hate hacks like this (FDR does not allow empty channel types)?
      if ds_ == {} then {(Garbage, {Garbage})} else ds_

  -- Declare channels:
  channel hear, say : MSG_BODY
  channel dummy_leak, dummy_send, dummy_receive

  -- Complete intruder

  -- Intruder used for temporal specs
  BUILD_INTRUDER'(INTRUDER_0,IK) =
    (BUILD_INTRUDER_0(INTRUDER_0) ||| SAY_KNOWN(IK)) [| STOP_SET |] STOP

  -- Intruder used for all other specs
  BUILD_INTRUDER(INTRUDER_0) = BUILD_INTRUDER'(INTRUDER_0,IK1)

endmodule

-- FDR bug: cannot have a module prefix in a channel type
Deductions' = INTRUDER_M::COMBINED_DEDUCTIONS
channel infer : Deductions'

IntruderInterface = 
  Union({
    {| receive.I.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| receive.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::INPUT_MSG1,
      SYSTEM_M::INPUT_MSG2,
      SYSTEM_M::INPUT_MSG3
    }) |},
    {| send.A_.I.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::OUTPUT_MSG1,
      SYSTEM_M::OUTPUT_MSG2,
      SYSTEM_M::OUTPUT_MSG3
    }) |}
  })

SYSTEM = 
  SYSTEM_M::SYSTEM_0 [| IntruderInterface |] INTRUDER_M::BUILD_INTRUDER(INTRUDER_M::INTRUDER_0)

-- ************************************************************************
-- *                    Specifications and Assertions                     *
-- ************************************************************************

module SECRET_M

  -- Specification for single secret

  SECRET_SPEC_0(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ ->
      (if member(I, Bs_) then SECRET_SPEC_0(s_)
       else SECRET_SPEC_1(s_))
    []
    leak.s_ -> SECRET_SPEC_0(s_)
  SECRET_SPEC_1(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ -> SECRET_SPEC_1(s_)
  -- Specification for all secrets

  AlphaS(s_) = 
    Union({
      {|signal.Claim_Secret.A_.s_ | A_ <- ALL_PRINCIPALS|},
      {leak.s_}
    })
  -- Sequential version; secs_ is secrets that intruder must not learn

  SEQ_SECRET_SPEC_0(secs_) =
    scs?s_!IntIn -> SEQ_SECRET_SPEC_0(secs_)
    []
    card(secs_)<4 & scs?s_!IntNotIn ->
      SEQ_SECRET_SPEC_0(union(secs_,{s_}))
    []
    card(secs_)==4 & scs?s_:secs_!IntNotIn ->
      SEQ_SECRET_SPEC_0(secs_)
    []
    leak?s_ : diff(ALL_SECRETS,secs_) -> SEQ_SECRET_SPEC_0(secs_)

  isIntIn(S_) = if member(I,S_) then IntIn else IntNotIn

  Alpha_SECRETS =
    Union({
      {|leak, signal.Claim_Secret.A_ | A_ <- HONEST|}
    })

  Alpha_SEQ_SECRETS = 
    Union({
      {|leak, scs|}
    })

exports

  SECRET_SPEC = (|| s_ : ALL_SECRETS @ [AlphaS(s_)] SECRET_SPEC_0(s_))

  datatype IncInt = IntIn | IntNotIn

  channel scs : ALL_SECRETS.IncInt

  SEQ_SECRET_SPEC = SEQ_SECRET_SPEC_0({})

  -- System for secrecy checking

  SYSTEM_S = 
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[env.a.(Env0, ALGEBRA_M::applyRenaming(b), <na, b>)
          <- signal.Claim_Secret.a.ALGEBRA_M::applyRenaming(na).{b}, 
        receive.b.a.ALGEBRA_M::rmb((Msg2, Encrypt.(PK__.(a), <na, nb>), <nb>))
          <- signal.Claim_Secret.a.ALGEBRA_M::applyRenaming(nb).{b}, 
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>))
          <- signal.Claim_Secret.b.ALGEBRA_M::applyRenaming(nb).{a}, 
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>))
          <- signal.Claim_Secret.b.ALGEBRA_M::applyRenaming(na).{a} |
            a <- Agent_renamed_, na <- Nonce_renamed_, b <- Agent_renamed_, 
            nb <- Nonce_renamed_
      ]] \ {| env, send, receive |}

  SYSTEM_S_SEQ =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[env.a.(Env0, ALGEBRA_M::applyRenaming(b), <na, b>)
          <- scs.ALGEBRA_M::applyRenaming(na).isIntIn({a, b}), 
        receive.b.a.ALGEBRA_M::rmb((Msg2, Encrypt.(PK__.(a), <na, nb>), <nb>))
          <- scs.ALGEBRA_M::applyRenaming(nb).isIntIn({a, b}), 
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>))
          <- scs.ALGEBRA_M::applyRenaming(nb).isIntIn({b, a}), 
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>))
          <- scs.ALGEBRA_M::applyRenaming(na).isIntIn({b, a}) |
            a <- Agent_renamed_, na <- Nonce_renamed_, b <- Agent_renamed_, 
            nb <- Nonce_renamed_
      ]] \ {| env, send, receive |}

endmodule

-- Assertion of secrecy

assert SECRET_M::SECRET_SPEC [T= SECRET_M::SYSTEM_S
assert SECRET_M::SEQ_SECRET_SPEC [T= SECRET_M::SYSTEM_S_SEQ

-- ************************************************************************
-- *                 Authentication specification number 1                *
-- ************************************************************************

module AUTH1_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateINITIATORToRESPONDERAliveness_0(a) =
    signal.Running1?a_role_!a?C_ ->
    CHAOS({signal.Commit1.RESPONDER_role.b.a | b <- Agent})

  AlphaAuthenticateINITIATORToRESPONDERAliveness_0(a) =
    {|signal.Running1.a_role_.a.b,
      signal.Commit1.RESPONDER_role.b.a |
         b <- Agent, a_role_ <- HONEST_ROLE|}

  -- Specs for particular agents being authenticated

  AuthenticateINITIATORAToRESPONDERAliveness =
    AuthenticateINITIATORToRESPONDERAliveness_0(A)

  AuthenticateINITIATORBToRESPONDERAliveness =
    STOP

  -- alphabet of specification

  alphaAuthenticateINITIATORToRESPONDERAliveness =
    Union({
      AlphaAuthenticateINITIATORToRESPONDERAliveness_0(A),
      AlphaAuthenticateINITIATORToRESPONDERAliveness_0(B)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateINITIATORToRESPONDERAliveness =
    (AuthenticateINITIATORAToRESPONDERAliveness
    [| inter(AlphaAuthenticateINITIATORToRESPONDERAliveness_0(A),
             AlphaAuthenticateINITIATORToRESPONDERAliveness_0(B)) |]
    AuthenticateINITIATORBToRESPONDERAliveness)

  -- System for authentication checking

  SYSTEM_1 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Running1.INITIATOR_role.a.b,  
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Commit1.RESPONDER_role.b.a |
            a <- Agent_renamed_, b <- Agent_renamed_, na <- Nonce_renamed_, 
            nb <- Nonce_renamed_
      ]]
      \ diff(Events, alphaAuthenticateINITIATORToRESPONDERAliveness)

endmodule

assert AUTH1_M::AuthenticateINITIATORToRESPONDERAliveness [T= 
       AUTH1_M::SYSTEM_1

-- ************************************************************************
-- *                 Authentication specification number 2                *
-- ************************************************************************

module AUTH2_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateINITIATORToRESPONDERWeakAgreement_0(a) =
    signal.Running2?a_role_!a?b ->
    CHAOS({signal.Commit2.RESPONDER_role.b.a})

  AlphaAuthenticateINITIATORToRESPONDERWeakAgreement_0(a) =
    {|signal.Running2.a_role_.a.b,
      signal.Commit2.RESPONDER_role.b.a |
         b <- inter(Agent, HONEST), a_role_ <- HONEST_ROLE|}

  -- Specs for particular agents being authenticated

  AuthenticateINITIATORAToRESPONDERWeakAgreement =
    AuthenticateINITIATORToRESPONDERWeakAgreement_0(A)

  AuthenticateINITIATORBToRESPONDERWeakAgreement =
    STOP

  -- alphabet of specification

  alphaAuthenticateINITIATORToRESPONDERWeakAgreement =
    Union({
      AlphaAuthenticateINITIATORToRESPONDERWeakAgreement_0(A),
      AlphaAuthenticateINITIATORToRESPONDERWeakAgreement_0(B)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateINITIATORToRESPONDERWeakAgreement =
    (AuthenticateINITIATORAToRESPONDERWeakAgreement
    [| inter(AlphaAuthenticateINITIATORToRESPONDERWeakAgreement_0(A),
             AlphaAuthenticateINITIATORToRESPONDERWeakAgreement_0(B)) |]
    AuthenticateINITIATORBToRESPONDERWeakAgreement)

  -- System for authentication checking

  SYSTEM_2 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Running2.INITIATOR_role.a.b,  
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Commit2.RESPONDER_role.b.a |
            a <- Agent_renamed_, b <- Agent_renamed_, na <- Nonce_renamed_, 
            nb <- Nonce_renamed_
      ]]
      \ diff(Events, alphaAuthenticateINITIATORToRESPONDERWeakAgreement)

endmodule

assert AUTH2_M::AuthenticateINITIATORToRESPONDERWeakAgreement [T= 
       AUTH2_M::SYSTEM_2

-- ************************************************************************
-- *                 Authentication specification number 3                *
-- ************************************************************************

module AUTH3_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(a) =
    signal.Running3.INITIATOR_role.a?b?na?nb ->
    CHAOS({signal.Commit3.RESPONDER_role.b.a.na.nb})

  AlphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(a) =
    {|signal.Running3.INITIATOR_role.a.b,
      signal.Commit3.RESPONDER_role.b.a |
         b <- inter(Agent, HONEST)|}

  -- Specs for particular agents being authenticated

  AuthenticateINITIATORAToRESPONDERNonInjectiveAgreement_na_nb =
    AuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(A)

  AuthenticateINITIATORBToRESPONDERNonInjectiveAgreement_na_nb =
    STOP

  -- alphabet of specification

  alphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb =
    Union({
      AlphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(A),
      AlphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(B)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb =
    (AuthenticateINITIATORAToRESPONDERNonInjectiveAgreement_na_nb
    [| inter(AlphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(A),
             AlphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb_0(B)) |]
    AuthenticateINITIATORBToRESPONDERNonInjectiveAgreement_na_nb)

  -- System for authentication checking

  SYSTEM_3 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Running3.INITIATOR_role.a.b.na.nb,  
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Commit3.RESPONDER_role.b.a.na.nb |
            a <- Agent_renamed_, b <- Agent_renamed_, na <- Nonce_renamed_, 
            nb <- Nonce_renamed_
      ]]
      \ diff(Events, alphaAuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb)

endmodule

assert AUTH3_M::AuthenticateINITIATORToRESPONDERNonInjectiveAgreement_na_nb [T= 
       AUTH3_M::SYSTEM_3

-- ************************************************************************
-- *                 Authentication specification number 4                *
-- ************************************************************************

module AUTH4_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateINITIATORToRESPONDERAgreement_na_nb_0(a) =
    signal.Running4.INITIATOR_role.a?b?na?nb ->
    signal.Commit4.RESPONDER_role.b.a.na.nb -> STOP

  AlphaAuthenticateINITIATORToRESPONDERAgreement_na_nb_0(a) =
    {|signal.Running4.INITIATOR_role.a.b,
      signal.Commit4.RESPONDER_role.b.a |
         b <- inter(Agent, HONEST)|}

  -- Specs for particular agents being authenticated

  AuthenticateINITIATORAToRESPONDERAgreement_na_nb =
    AuthenticateINITIATORToRESPONDERAgreement_na_nb_0(A)

  AuthenticateINITIATORBToRESPONDERAgreement_na_nb =
    STOP

  -- alphabet of specification

  alphaAuthenticateINITIATORToRESPONDERAgreement_na_nb =
    Union({
      AlphaAuthenticateINITIATORToRESPONDERAgreement_na_nb_0(A),
      AlphaAuthenticateINITIATORToRESPONDERAgreement_na_nb_0(B)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateINITIATORToRESPONDERAgreement_na_nb =
    (AuthenticateINITIATORAToRESPONDERAgreement_na_nb
    [| inter(AlphaAuthenticateINITIATORToRESPONDERAgreement_na_nb_0(A),
             AlphaAuthenticateINITIATORToRESPONDERAgreement_na_nb_0(B)) |]
    AuthenticateINITIATORBToRESPONDERAgreement_na_nb)

  -- System for authentication checking

  SYSTEM_4 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Running4.INITIATOR_role.a.b.na.nb,  
        receive.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Commit4.RESPONDER_role.b.a.na.nb |
            a <- Agent_renamed_, b <- Agent_renamed_, na <- Nonce_renamed_, 
            nb <- Nonce_renamed_
      ]]
      \ diff(Events, alphaAuthenticateINITIATORToRESPONDERAgreement_na_nb)

endmodule

assert AUTH4_M::AuthenticateINITIATORToRESPONDERAgreement_na_nb [T= 
       AUTH4_M::SYSTEM_4

-- ************************************************************************
-- *                 Authentication specification number 5                *
-- ************************************************************************

module AUTH5_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateRESPONDERToINITIATORAgreement_na_nb_0(b) =
    signal.Running5.RESPONDER_role.b?a?na?nb ->
    signal.Commit5.INITIATOR_role.a.b.na.nb -> STOP

  AlphaAuthenticateRESPONDERToINITIATORAgreement_na_nb_0(b) =
    {|signal.Running5.RESPONDER_role.b.a,
      signal.Commit5.INITIATOR_role.a.b |
         a <- inter(Agent, HONEST)|}

  -- Specs for particular agents being authenticated

  AuthenticateRESPONDERAToINITIATORAgreement_na_nb =
    STOP

  AuthenticateRESPONDERBToINITIATORAgreement_na_nb =
    AuthenticateRESPONDERToINITIATORAgreement_na_nb_0(B)

  -- alphabet of specification

  alphaAuthenticateRESPONDERToINITIATORAgreement_na_nb =
    Union({
      AlphaAuthenticateRESPONDERToINITIATORAgreement_na_nb_0(A),
      AlphaAuthenticateRESPONDERToINITIATORAgreement_na_nb_0(B)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateRESPONDERToINITIATORAgreement_na_nb =
    (AuthenticateRESPONDERAToINITIATORAgreement_na_nb
    [| inter(AlphaAuthenticateRESPONDERToINITIATORAgreement_na_nb_0(A),
             AlphaAuthenticateRESPONDERToINITIATORAgreement_na_nb_0(B)) |]
    AuthenticateRESPONDERBToINITIATORAgreement_na_nb)

  -- System for authentication checking

  SYSTEM_5 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.b.a.ALGEBRA_M::rmb((Msg2, Encrypt.(PK__.(a), <na, nb>), <na, nb>)) <-
          signal.Running5.RESPONDER_role.b.a.na.nb,  
        send.a.b.ALGEBRA_M::rmb((Msg3, Encrypt.(PK__.(b), <nb>), <na, nb>)) <-
          signal.Commit5.INITIATOR_role.a.b.na.nb |
            b <- Agent_renamed_, a <- Agent_renamed_, na <- Nonce_renamed_, 
            nb <- Nonce_renamed_
      ]]
      \ diff(Events, alphaAuthenticateRESPONDERToINITIATORAgreement_na_nb)

endmodule

assert AUTH5_M::AuthenticateRESPONDERToINITIATORAgreement_na_nb [T= 
       AUTH5_M::SYSTEM_5

