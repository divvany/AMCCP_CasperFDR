-- CSP script produced using Casper version 2.0

-- -- SPLICE Protocol, without timestamps
-- -- Test for using decryptable etc etc
-- 
-- #Free variables
-- 
-- A, B : Agent
-- n1, n2, n3 : Nonce
-- pka, pkb : PublicKey
-- S: Server
-- ts : TimeStamp
-- 
-- PK : Agent -> PublicKey
-- SK : Agent -> SecretKey
-- SPK : Server -> ServerPublicKey
-- SSK : Server -> ServerSecretKey
-- 
-- InverseKeys = (PK, SK), (SPK, SSK)
-- 
-- #Processes
-- 
-- INITIATOR(A,S,n1,n2) knows SK(A), SPK
-- RESPONDER(B,S,n3) knows SK(B), SPK
-- SERVER(S) knows PK, SSK(S)
-- 
-- #Protocol description
-- 
-- 0.    -> A : B
-- [A != B]
-- 1.  A -> S : B, n1 
-- 2.  S -> A : {S, A, n1, PK(B) % pkb}{SSK(S)}
-- 3.  A -> B : {A, ts, {n2}{pkb % PK(B)}}{SK(A)} % v
-- [A != B]
-- 4.  B -> S : A, n3
-- 5.  S -> B : {S, B, n3, PK(A) % pka}{SSK(S)}
-- [decryptable(v, pka) and nth(decrypt(v,pka), 1) == A and \
--   nth(decrypt(v,pka), 2) == (Timestamp.now) and \
--   decryptable(nth(decrypt(v,pka), 3), SK(B))]
-- <n2 := nth (decrypt (nth(decrypt(v,pka), 3), SK(B)), 1)>
-- 6.  B -> A : {B, n2}{pka % PK(A)}
-- 
-- #Specification
-- 
-- -- FAIL
-- Secret(A, n2, [B])
-- -- FAIL
-- Secret(B, n2, [A])
-- -- FAIL
-- Agreement(A, B, [n2])
-- -- FAIL
-- Agreement(B, A, [n2])
-- 
-- #Actual variables
-- 
-- Alice, Bob, Mallory : Agent
-- Na, Np : Nonce
-- Sam : Server
-- TimeStamp =  0..1
-- MaxRunTime = 0
-- 
-- #Inline functions
-- 
-- symbolic PK, SK, SPK, SSK
-- 
-- #System
-- 
-- INITIATOR(Alice, Sam, Np, Na)
-- RESPONDER(Bob, Sam, Np)
-- SERVER(Sam)
-- 
-- #Intruder Information
-- 
-- Intruder = Mallory
-- IntruderKnowledge = {Alice, Bob, Mallory, Sam, PK, SPK, SK(Mallory)}
-- 

-- ************************************************************************
-- *                                Types                                 *
-- ************************************************************************

-- Main datatype, representing all possible messages

datatype Encryption =
  Alice | Bob | Mallory | Na | Np | Sam | Garbage | PK__.Agent | SK__.Agent | 
  SPK__.Server | SSK__.Server | Timestamp.TS | Sq.Seq(Encryption) | 
  Encrypt.(ALL_KEYS,Seq(Encryption)) | Hash.(HashFunction, Seq(Encryption)) | 
  Xor.(Encryption, Encryption)

-- All keys and hashfunctions in the system

ALL_KEYS :: {Encryption}
ALL_KEYS = Union({PublicKey, SecretKey, ServerSecretKey})

ASYMMETRIC_KEYS = {k_, inverse(k_) | k_ <- ALL_KEYS, k_!=inverse(k_)}
HashFunction :: {Encryption}
HashFunction = {}

-- All atoms in the system

ATOM = {Alice, Bob, Mallory, Na, Np, Sam, Garbage}

-- Information about timestamps

now = 0
MinTime = -1
MaxTime = -0
TS = {MinTime .. MaxTime}
MaxRunTime = 0
TimeStamp = {Timestamp.t_ | t_ <- TS}
max(t0_,t1_) = if t0_>t1_ then t0_ else t1_
min(t0_,t1_) = if t0_>t1_ then t1_ else t0_

-- Some standard functions

channel dummyrun_
RUN(X_) = 
  let drun = dummyrun_ -> drun
  within drun[[dummyrun_ <- x_ | x_ <- X_]]

encrypt(m_,k_) = Encrypt.(k_,m_)
decrypt(Encrypt.(k1_,m_),k_) = if k_ == inverse(k1_) then m_ else <Garbage>
decrypt(_,_) = <Garbage>
decryptable(Encrypt.(k1_,m_),k_) = k_ == inverse(k1_) 
decryptable(_,_) = false
nth(ms_,n_) = if n_ == 1 then head(ms_) else nth(tail(ms_), n_ - 1)

map(f_, <>) = <>
map(f_, <x_>^xs_) = <f_(x_)>^map(f_,xs_)

-- Decrement all timestamps by 1
dects(t_) = if t_ > MinTime then t_-1 else t_
updt(Timestamp.t_) = Timestamp.dects(t_)
updt(Sq.es_) = Sq.map(updt,es_)
updt(Encrypt.(k_,es_)) = Encrypt.(k_, map(updt,es_))
updt(Hash.(f_,es_)) = Hash.(f_,map(updt,es_))
updt(Xor.(e1_,e2_)) = Xor.(updt(e1_),updt(e2_))
updt(x_) = x_

-- add Garbage to a set that contains and encryption,
-- hash function application of Vernam encryption

addGarbage_(S_) =
  if S_=={} then {Garbage}
  else Union({S_, {Garbage | Encrypt._ <- S_}, 
             {Garbage | Hash._ <- S_},
             {Garbage | Xor._ <- S_}})

-- Definitions of user supplied functions

PK(arg_1_) = PK__.(arg_1_)
SK(arg_1_) = SK__.(arg_1_)
SPK(arg_1_) = SPK__.(arg_1_)
SSK(arg_1_) = SSK__.(arg_1_)

-- Inverses of functions

inverse(PK__.arg_) = SK__.arg_
inverse(SK__.arg_) = PK__.arg_
inverse(SPK__.arg_) = SSK__.arg_
inverse(SSK__.arg_) = SPK__.arg_

-- Types in system

Agent = {Alice, Bob, Mallory}
Nonce = {Na, Np}
Server = {Sam}
PublicKey = {PK(arg_1_) | arg_1_ <- Agent}
SecretKey = {SK(arg_1_) | arg_1_ <- Agent}
ServerPublicKey = {SPK(arg_1_) | arg_1_ <- Server}
ServerSecretKey = {SSK(arg_1_) | arg_1_ <- Server}


-- ************************************************************************
-- *                               Messages                               *
-- ************************************************************************

-- Message labels

datatype Labels =
  Msg1 | Msg2 | Msg3 | Msg4 | Msg5 | Msg6 | Env0

MSG_BODY = {ALGEBRA_M::applyRenaming(m_) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO}

-- Type of principals

ALL_PRINCIPALS = Union({Agent, Server})

INTRUDER = Mallory

HONEST = diff(ALL_PRINCIPALS, {INTRUDER})

-- Channel declarations

INPUT_MSG = SYSTEM_M::INPUT_MSG
OUTPUT_MSG = SYSTEM_M::OUTPUT_MSG
DIRECT_MSG = SYSTEM_M::DIRECT_MSG
ENV_MSG :: {(Labels, Encryption, <Encryption>)}
ENV_MSG = SYSTEM_M::ENV_MSG

channel receive: ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_MSG
channel send: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_MSG
channel env : ALL_PRINCIPALS.ENV_MSG
channel error
channel start, close : HONEST.HONEST_ROLE

channel leak : addGarbage_(ALL_SECRETS)
-- Roles of agents

datatype ROLE = INITIATOR_role | RESPONDER_role | SERVER_role

HONEST_ROLE = ROLE

-- Secrets in the protocol

ALL_SECRETS_0 = Nonce
ALL_SECRETS = addGarbage_(ALGEBRA_M::applyRenamingToSet(ALL_SECRETS_0))

-- Define type of signals, and declare signal channel

datatype Signal = 
  Claim_Secret.ALL_PRINCIPALS.ALL_SECRETS.Set(ALL_PRINCIPALS) |
  Running1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce |
  Commit1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce |
  RunCom1.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce |
  Running2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce |
  Commit2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce |
  RunCom2.ALL_PRINCIPALS.ALL_PRINCIPALS.Nonce.Nonce

channel signal : Signal

-- Timing functions

channel tock

TOCKS(n_) = n_>0 & tock -> TOCKS(n_ - 1) [] SKIP
TSKIP = tock -> TSKIP [] SKIP
allowInitTocks(P_) = tock -> allowInitTocks(P_) [] P_
TIMEOUT = tock -> TSKIP
transparent explicate
addTime(P_,n_) = explicate(allowInitTocks((P_ ||| TOCKS(n_)) /\ TIMEOUT))

Fact_1 = 
  Union({
    {Garbage},
    Agent,
    Nonce,
    PublicKey,
    Server,
    TimeStamp,
    ServerSecretKey,
    ServerPublicKey,
    SecretKey,
    {Encrypt.(SSK__.(S), <S, A, n1, pkb>) |
       A <- Agent, S <- Server, n1 <- Nonce, pkb <- addGarbage_(PublicKey)},
    {Encrypt.(SSK__.(S), <S, A, n1, PK__.(B)>) |
       A <- Agent, B <- Agent, S <- Server, n1 <- Nonce},
    {Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(pkb, <n2>)>) |
       A <- Agent, n2 <- Nonce, ts <- TS, pkb <- addGarbage_(PublicKey)},
    {Encrypt.(pkb, <n2>) |
       n2 <- Nonce, pkb <- addGarbage_(PublicKey)},
    {Encrypt.(PK__.(B), <n2>) |
       B <- Agent, n2 <- Nonce},
    {Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(PK__.(B), <n2>)>) |
       A <- Agent, B <- Agent, n2 <- Nonce, ts <- TS},
    {Encrypt.(SSK__.(S), <S, B, n3, pka>) |
       B <- Agent, S <- Server, n3 <- Nonce, pka <- addGarbage_(PublicKey)},
    {Encrypt.(SSK__.(S), <S, B, n3, PK__.(A)>) |
       A <- Agent, B <- Agent, S <- Server, n3 <- Nonce},
    {Encrypt.(pka, <B, n2>) |
       B <- Agent, n2 <- Nonce, pka <- addGarbage_(PublicKey)},
    {Encrypt.(PK__.(A), <B, n2>) |
       A <- Agent, B <- Agent, n2 <- Nonce}
  })

external relational_inverse_image
external relational_image
transparent chase
transparent sbisim

-- ************************************************************************
-- *                            Honest Agents                             *
-- ************************************************************************

module SYSTEM_M

  -- types of messages sent and received by agents, as they are
  -- considered by those agents

  input_proj((l_,m_,se_,re_)) = (l_,m_,re_)
  rmb_input_proj((l_,m_,se_,re_)) = ALGEBRA_M::rmb((l_,m_,re_))
  output_proj((l_,m_,se_,re_)) = (l_,m_,se_)

  INPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  INPUT_INT_MSG = 
    
    Union({
      INPUT_INT_MSG1,
      INPUT_INT_MSG2,
      INPUT_INT_MSG3,
      INPUT_INT_MSG4,
      INPUT_INT_MSG5,
      INPUT_INT_MSG6
    })

  OUTPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  OUTPUT_INT_MSG = 
    
    Union({
      OUTPUT_INT_MSG1,
      OUTPUT_INT_MSG2,
      OUTPUT_INT_MSG3,
      OUTPUT_INT_MSG4,
      OUTPUT_INT_MSG5,
      OUTPUT_INT_MSG6
    })

  -- INITIATOR

  INITIATOR_0(runTimeRemaining_, A, S, n1, n2) =
      INITIATOR_0'(runTimeRemaining_, A, S, n1, n2)

  INITIATOR_0'(runTimeRemaining_, A, S, n1, n2) = 
    tock -> INITIATOR_0'(runTimeRemaining_, updt(A), updt(S), updt(n1), updt(n2))
    [] 
    [] B : Agent @ A != B & env_I.A.(Env0, B,<>) ->
    output.A.S.(Msg1, Sq.<B, n1>,<>) ->
      INITIATOR_0''(runTimeRemaining_, A, S, n1, n2, B)

  INITIATOR_0''(runTimeRemaining_, A, S, n1, n2, B) = 
    tock -> (if runTimeRemaining_ < 0 then SKIP
      else INITIATOR_0''(runTimeRemaining_-1, updt(A), updt(S), updt(n1), updt(n2), updt(B)))
    [] 
    [] pkb : addGarbage_(PublicKey) @ 
      input.S.A.(Msg2, Encrypt.(SSK__.(S), <S, A, n1, pkb>),<>) ->
    [] ts : TS @ 
      output.A.B.(Msg3, Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(pkb, <n2>)>),<n2>) ->
      INITIATOR_0'''(runTimeRemaining_, A, S, n1, n2, B, pkb, ts)

  INITIATOR_0'''(runTimeRemaining_, A, S, n1, n2, B, pkb, ts) = 
    tock -> (if runTimeRemaining_ < 0 then SKIP
      else INITIATOR_0'''(runTimeRemaining_-1, updt(A), updt(S), updt(n1), updt(n2), updt(B), updt(pkb), dects(ts)))
    [] 
    input.B.A.(Msg6, Encrypt.(PK__.(A), <B, n2>),<n2>) ->
    SKIP

  INITIATOR_1(runTimeRemaining_, A, S, n1, n2) = INITIATOR_0(runTimeRemaining_, A, S, n1, n2)

  INITIATOR(runTimeRemaining_, A, S, n1, n2) =
    INITIATOR_1(runTimeRemaining_, A, S, n1, n2)
      [[input.S.A.(l_,m_,re_) <- receive.S.A.ALGEBRA_M::rmb((l_,m_,re_)) |
          S <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO2]]
      [[input.B.A.(l_,m_,re_) <- receive.B.A.ALGEBRA_M::rmb((l_,m_,re_)) |
          B <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO6]]
      [[output.A.S.(l_,m_,se_) <- send.A.S.ALGEBRA_M::rmb((l_,m_,se_)) |
          S <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO1]]
      [[output.A.B.(l_,m_,se_) <- send.A.B.ALGEBRA_M::rmb((l_,m_,se_)) |
          B <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO3]]
      [[env_I.A.m_ <- env.A.ALGEBRA_M::rmb(m_) |
          m_ <- ENV_INT_MSG0]]

  -- RESPONDER

  RESPONDER_0(runTimeRemaining_, B, S, n3) =
      RESPONDER_0'(runTimeRemaining_, B, S, n3)

  RESPONDER_0'(runTimeRemaining_, B, S, n3) = 
    tock -> RESPONDER_0'(runTimeRemaining_, updt(B), updt(S), updt(n3))
    [] 
    [] A : Agent @ 
    [] v : addGarbage_({Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(pkb, <n2>)>) | A <- Agent, n2 <- Nonce, ts <- TS, pkb <- addGarbage_(PublicKey)}) @ 
      A != B & input.A.B.(Msg3, v,<>) ->
    output.B.S.(Msg4, Sq.<A, n3>,<>) ->
      RESPONDER_0''(runTimeRemaining_, B, S, n3, A, v)

  RESPONDER_0''(runTimeRemaining_, B, S, n3, A, v) = 
    tock -> (if runTimeRemaining_ < 0 then SKIP
      else RESPONDER_0''(runTimeRemaining_-1, updt(B), updt(S), updt(n3), updt(A), updt(v)))
    [] 
    [] pka : addGarbage_(PublicKey) @ 
      decryptable(v, pka) and nth(decrypt(v,pka), 1) == A and   nth(decrypt(v,pka), 2) == (Timestamp.now) and   decryptable(nth(decrypt(v,pka), 3), SK(B)) & 
      input.S.B.(Msg5, Encrypt.(SSK__.(S), <S, B, n3, pka>),<>) ->
    RESPONDER_0'''(runTimeRemaining_, B, S, n3, A, v, pka, nth(decrypt(nth(decrypt(v,pka),3),SK(B)),1))

RESPONDER_0'''(runTimeRemaining_, B, S, n3, A, v, pka, n2) =
    output.B.A.(Msg6, Encrypt.(pka, <B, n2>),<n2>) ->
    SKIP

  RESPONDER_1(runTimeRemaining_, B, S, n3) = RESPONDER_0(runTimeRemaining_, B, S, n3)

  RESPONDER(runTimeRemaining_, B, S, n3) =
    RESPONDER_1(runTimeRemaining_, B, S, n3)
      [[input.A.B.(l_,m_,re_) <- receive.A.B.ALGEBRA_M::rmb((l_,m_,re_)) |
          A <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO3]]
      [[input.S.B.(l_,m_,re_) <- receive.S.B.ALGEBRA_M::rmb((l_,m_,re_)) |
          S <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO5]]
      [[output.B.S.(l_,m_,se_) <- send.B.S.ALGEBRA_M::rmb((l_,m_,se_)) |
          S <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO4]]
      [[output.B.A.(l_,m_,se_) <- send.B.A.ALGEBRA_M::rmb((l_,m_,se_)) |
          A <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO6]]

  -- SERVER

  SERVER_0(runTimeRemaining_, S) =
      SERVER_0'(runTimeRemaining_, S)

  SERVER_0'(runTimeRemaining_, S) = 
    tock -> SERVER_0'(runTimeRemaining_, updt(S))
    [] 
    [] A : Agent @ [] B : Agent @ [] n1 : Nonce @ 
      input.A.S.(Msg1, Sq.<B, n1>,<>) ->
    output.S.A.(Msg2, Encrypt.(SSK__.(S), <S, A, n1, PK__.(B)>),<>) ->
      SERVER_0''(runTimeRemaining_, S, A, B, n1)

  SERVER_0''(runTimeRemaining_, S, A, B, n1) = 
    tock -> (if runTimeRemaining_ < 0 then SKIP
      else SERVER_0''(runTimeRemaining_-1, updt(S), updt(A), updt(B), updt(n1)))
    [] 
    [] n3 : Nonce @ input.B.S.(Msg4, Sq.<A, n3>,<>) ->
    output.S.B.(Msg5, Encrypt.(SSK__.(S), <S, B, n3, PK__.(A)>),<>) ->
    SKIP

  SERVER_1(runTimeRemaining_, S) = SERVER_0(runTimeRemaining_, S)

  SERVER(runTimeRemaining_, S) =
    SERVER_1(runTimeRemaining_, S)
      [[input.A.S.(l_,m_,re_) <- receive.A.S.ALGEBRA_M::rmb((l_,m_,re_)) |
          A <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO1]]
      [[input.B.S.(l_,m_,re_) <- receive.B.S.ALGEBRA_M::rmb((l_,m_,re_)) |
          B <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO4]]
      [[output.S.A.(l_,m_,se_) <- send.S.A.ALGEBRA_M::rmb((l_,m_,se_)) |
          A <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO2]]
      [[output.S.B.(l_,m_,se_) <- send.S.B.ALGEBRA_M::rmb((l_,m_,se_)) |
          B <- Agent, (l_,m_,se_,re_) <- INT_MSG_INFO5]]

  -- Process representing Alice

  Alpha_INITIATOR_Alice = 
    Union({
      {|env.Alice.m_ | m_ <- ENV_MSG0|},
      {|send.Alice.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG1|},
      {|send.Alice.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG3|},
      {|receive.A_.Alice.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG2|},
      {|receive.A_.Alice.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG6|},
      {tock}
    })

  INITIATOR_Alice = (INITIATOR(MaxRunTime, Alice, Sam, Np, Na) ; RUN({tock}))

  Alpha_Alice = 
    Union({
      {|env.Alice|},
      {|send.Alice.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.Alice.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG2|},
      {|receive.A_.Alice.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG6|},
      {tock}
    })

  AGENT_Alice =
    (INITIATOR_Alice [Alpha_INITIATOR_Alice || {} ] STOP)

  -- Process representing Bob

  Alpha_RESPONDER_Bob = 
    Union({
      {|send.Bob.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG4|},
      {|send.Bob.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG6|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG5|},
      {tock}
    })

  RESPONDER_Bob = (RESPONDER(MaxRunTime, Bob, Sam, Np) ; RUN({tock}))

  Alpha_Bob = 
    Union({
      {|env.Bob|},
      {|send.Bob.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG5|},
      {tock}
    })

  AGENT_Bob =
    (RESPONDER_Bob [Alpha_RESPONDER_Bob || {} ] STOP)

  -- Process representing Sam

  Alpha_SERVER_Sam = 
    Union({
      {|send.Sam.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG2|},
      {|send.Sam.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG5|},
      {|receive.A_.Sam.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG1|},
      {|receive.A_.Sam.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG4|},
      {tock}
    })

  SERVER_Sam = (SERVER(MaxRunTime, Sam) ; RUN({tock}))

  Alpha_Sam = 
    Union({
      {|env.Sam|},
      {|send.Sam.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.Sam.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG1|},
      {|receive.A_.Sam.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG4|},
      {tock}
    })

  AGENT_Sam =
    (SERVER_Sam [Alpha_SERVER_Sam || {} ] STOP)

exports

  -- Messages as they appear on the network; each messages is renamed
  -- (by rmb) to the representative member of its equivalence class

  INPUT_MSG1 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG1}
  INPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG2}
  INPUT_MSG3 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG3}
  INPUT_MSG4 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG4}
  INPUT_MSG5 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG5}
  INPUT_MSG6 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG6}

  OUTPUT_MSG1 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG1}
  OUTPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG2}
  OUTPUT_MSG3 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG3}
  OUTPUT_MSG4 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG4}
  OUTPUT_MSG5 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG5}
  OUTPUT_MSG6 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG6}

  DIRECT_MSG1 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO1}
  DIRECT_MSG2 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO2}
  DIRECT_MSG3 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO3}
  DIRECT_MSG4 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO4}
  DIRECT_MSG5 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO5}
  DIRECT_MSG6 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO6}

  -- Environmental messages

  ENV_INT_MSG0 :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG0 = 
    {(Env0, B, <>) |
       B <- Agent}

  ENV_MSG0 = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG0}

  ENV_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG = ENV_INT_MSG0

  -- information about messages sent and received by agents, including
  -- extras fields for both agents

  INT_MSG_INFO1 = 
    {(Msg1, Sq.<B, n1>, <>, <>) |
       B <- Agent, n1 <- Nonce}
  INT_MSG_INFO2 = 
    {(Msg2, Encrypt.(SSK__.(S), <S, A, n1, pkb>), <>, <>) |
       A <- Agent, S <- Server, n1 <- Nonce, pkb <- addGarbage_(PublicKey)}
  INT_MSG_INFO3 = 
    {(Msg3, v, <n2>, <>) |
       n2 <- Nonce, 
       v <- addGarbage_({Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(pkb, <n2>)>) | A <- Agent, n2 <- Nonce, ts <- TS, pkb <- addGarbage_(PublicKey)})}
  INT_MSG_INFO4 = 
    {(Msg4, Sq.<A, n3>, <>, <>) |
       A <- Agent, n3 <- Nonce}
  INT_MSG_INFO5 = 
    {(Msg5, Encrypt.(SSK__.(S), <S, B, n3, pka>), <>, <>) |
       B <- Agent, S <- Server, n3 <- Nonce, pka <- addGarbage_(PublicKey)}
  INT_MSG_INFO6 = 
    {(Msg6, Encrypt.(pka, <B, n2>), <n2>, <n2>) |
       n2 <- Nonce, B <- Agent, pka <- addGarbage_(PublicKey)}

  ENV_MSG = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG}

  INT_MSG_INFO :: {(Labels, Encryption, <Encryption>, <Encryption>)}
  INT_MSG_INFO = 
    Union({
      INT_MSG_INFO1,
      INT_MSG_INFO2,
      INT_MSG_INFO3,
      INT_MSG_INFO4,
      INT_MSG_INFO5,
      INT_MSG_INFO6
    })
  INPUT_INT_MSG1 = { input_proj(mt_) | mt_ <- INT_MSG_INFO1 }
  INPUT_INT_MSG2 = { input_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  INPUT_INT_MSG3 = { input_proj(mt_) | mt_ <- INT_MSG_INFO3 }
  INPUT_INT_MSG4 = { input_proj(mt_) | mt_ <- INT_MSG_INFO4 }
  INPUT_INT_MSG5 = { input_proj(mt_) | mt_ <- INT_MSG_INFO5 }
  INPUT_INT_MSG6 = { input_proj(mt_) | mt_ <- INT_MSG_INFO6 }

  INPUT_MSG = 
    Union({
      INPUT_MSG1,
      INPUT_MSG2,
      INPUT_MSG3,
      INPUT_MSG4,
      INPUT_MSG5,
      INPUT_MSG6
    })
  OUTPUT_INT_MSG1 = { output_proj(mt_) | mt_ <- INT_MSG_INFO1 }
  OUTPUT_INT_MSG2 = { output_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  OUTPUT_INT_MSG3 = { output_proj(mt_) | mt_ <- INT_MSG_INFO3 }
  OUTPUT_INT_MSG4 = { output_proj(mt_) | mt_ <- INT_MSG_INFO4 }
  OUTPUT_INT_MSG5 = { output_proj(mt_) | mt_ <- INT_MSG_INFO5 }
  OUTPUT_INT_MSG6 = { output_proj(mt_) | mt_ <- INT_MSG_INFO6 }

  OUTPUT_MSG = 
    Union({
      OUTPUT_MSG1,
      OUTPUT_MSG2,
      OUTPUT_MSG3,
      OUTPUT_MSG4,
      OUTPUT_MSG5,
      OUTPUT_MSG6
    })
  DIRECT_MSG = 
  Union({
    DIRECT_MSG1,
    DIRECT_MSG2,
    DIRECT_MSG3,
    DIRECT_MSG4,
    DIRECT_MSG5,
    DIRECT_MSG6
  })

  channel input:ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_INT_MSG
  channel output: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_INT_MSG
  channel env_I : ALL_PRINCIPALS.ENV_INT_MSG

  -- Complete system

  SYSTEM_0 =
    (AGENT_Alice
      [Alpha_Alice||union(Alpha_Bob, Alpha_Sam)]
    (AGENT_Bob
      [Alpha_Bob||Alpha_Sam]
    AGENT_Sam))

endmodule

-- ************************************************************************
-- *                               Algebra                                *
-- ************************************************************************

module ALGEBRA_M

  -- Algebraic laws, defined as a set of pairs

  laws = {(Garbage, Garbage)}

  -- Calculate transitive closure of algebraic laws, and select
  -- representative member of each equivalence class

  external mtransclose
  renaming = mtransclose(laws, Fact_1)
  ren = relational_inverse_image(renaming)

  -- function that renames non-sequential fact to representative member

  applyRenaming0(a_) =
    let S_ = ren(a_)
    within if card(S_)==0 then a_ else elsing(S_)

  elsing({x_}) = x_

  domain = {a_ | (_,a_) <- renaming}

exports

  -- function that renames arbitrary fact to representative member

  applyRenaming(Sq.ms_) =
    if member(Sq.ms_, Fact_1) then applyRenaming0(Sq.ms_) 
    else Sq.<applyRenaming0(m_) | m_ <- ms_>
  applyRenaming(a_) = applyRenaming0(a_)

  -- function that renames (label, fact, extras) triples

  rmb((l_,m_,extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(extras_))
  rmb4((l_,m_,s_extras_,r_extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(s_extras_), 
     applyRenamingToSeq(r_extras_))

  -- lift renaming to sets and to deductions

  applyRenamingToSet(X_) =
    union({elsing(ren(a_)) | a_ <- inter(X_,domain)},  diff(X_, domain))

  applyRenamingToSeq(X_) = <applyRenaming(e_) | e_ <- X_>

  applyRenamingToDeductions(S_) =
    {(applyRenaming0(f_), applyRenamingToSet(X_)) | (f_,X_) <- S_}

endmodule

-- ************************************************************************
-- *                             The Intruder                             *
-- ************************************************************************

module INTRUDER_M

  -- Intruder's deductions

  unSq_ (Sq.ms_) = set(ms_)
  unSq_ (m_) = {m_}

  unknown_(S_) = diff(S_, IK0)

  Base_Deductions_ =
    Union({SqDeductions, UnSqDeductions, 
           EncryptionDeductions, DecryptionDeductions,
           VernEncDeductions, VernDecDeductions, 
           FnAppDeductions, HashDeductions, UserDeductions})

  SqDeductions =
    {(Sq.fs_, unknown_(set(fs_))) | Sq.fs_ <- Fact_1}

  UnSqDeductions =
    {(f_, unknown_({Sq.fs_})) | Sq.fs_ <- Fact_1, f_ <- unknown_(set(fs_))}

  EncryptionDeductions =
    {(Encrypt.(k_,fs_), unknown_(union({k_}, set(fs_)))) | 
        Encrypt.(k_,fs_) <- Fact_1}

  DecryptionDeductions =
    {(f_, unknown_({Encrypt.(k_,fs_), inverse(k_)})) |
        Encrypt.(k_,fs_) <- Fact_1, f_ <- unknown_(set(fs_))}

  VernEncDeductions =
    {(Xor.(m1_,m2_), unknown_(union(unSq_(m1_), unSq_(m2_)))) | 
        Xor.(m1_,m2_) <- Fact_1}

  VernDecDeductions =
      {(m11_, union(unknown_(unSq_(m2_)), {Xor.(m1_,m2_)})) | 
         Xor.(m1_,m2_) <- Fact_1, m11_ <- unSq_(m1_)}

  HashDeductions = {(Hash.(f_, ms_), set(ms_)) | Hash.(f_, ms_) <- Fact_1}

  UserDeductions = {}

  FnAppDeductions = 
    Union({
      {(PK__.arg_1_, unknown_({arg_1_})) |
        PK__.arg_1_ <- Fact_1},
      {(SPK__.arg_1_, unknown_({arg_1_})) |
        SPK__.arg_1_ <- Fact_1}
    })

  -- close up intruder's initial knowledge under deductions;
  -- calculate which facts cannot be learnt

  components_(Sq.ms_) = 
    if member(Sq.ms_, Fact_1) then {Sq.ms_} else set(ms_)
  components_(m_) = {m_}

  Seeable_ = 
    Union({unknown_(components_(m_)) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO})

  (IK1, Deductions_, KnowableFact_) = 
    Close_(ALGEBRA_M::applyRenamingToSet(IK0), 
           ALGEBRA_M::applyRenamingToDeductions(Base_Deductions), 
           ALGEBRA_M::applyRenamingToSet(Fact_1))

  LearnableFact = diff(KnowableFact, IK1)

  -- The intruder

  -- * leak is used to signal that a possible secret has been learnt
  -- * hear and say are used to represent hearing or saying a message
  -- * infer(f,fs) represent deducing fact f from the set of facts fs

  -- Component of intruder for currently unknown fact f_:
  -- * ms_ is the set of messages that contain f_ at the top level
  -- * fss_ is the set of sets of facts from which f_ can be deduced
  -- * ds_ is the set of deductions that use f_

  IGNORANT(f_,ms_,fss_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,fss_,ds_)
    []
    ([] fs_ : fss_, not(member(f_,fs_)) @ 
        infer.(f_,fs_) -> KNOWS(f_,ms_,fss_,ds_))
    [] tock -> (IGNORANT(f_,ms_,fss_,ds_)
      -- We can only be the updated version if there is a fact that can
      -- be updated to us.
      [] card({f1_ | f1_ <- UpdateableFacts, updt(f1_) == f_, f_ != f1_}) > 0 &
          tockInfer.f_ -> KNOWS(f_,ms_,fss_,ds_))

  -- Component of intruder for known fact f_

  KNOWS(f_,ms_,fss_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,fss_,ds_)
    []
    say?m_:ms_ -> KNOWS(f_,ms_,fss_,ds_)
    [] 
    ([] ded@@(f1_,fs_) : ds_, f1_!=f_ @ infer.ded -> KNOWS(f_,ms_,fss_,ds_))
    []
    member(f_,ALL_SECRETS) & leak.f_ -> KNOWS(f_,ms_,fss_,ds_)
    [] tock ->
      (if updt(f_) != f_ then
        tockInfer.updt(f_) -> IGNORANT(f_,ms_,fss_,ds_)
      else -- Allow more infers (consider if we obtain a fresher version of this message)
        KNOWS(f_,ms_,fss_,ds_)
        [] tockInfer.f_ -> KNOWS(f_,ms_,fss_,ds_))

  -- Alphabet of this component

  AlphaL(f_,ms_,fss_,ds_) =
    Union({(if member(f_,ALL_SECRETS) then {leak.f_} else {}),
           {hear.m_, say.m_ | m_ <- ms_},
           {infer.(f_,fs_) | fs_ <- fss_},
           {infer.(f1_,fs_) | (f1_,fs_) <- ds_},
           {tock, tockInfer.f_, tockInfer.updt(f_)}
         })

  -- Set of all (f_, ms_, fss_, ds_) for which intruder components 
  -- must be built

  f_ms_fss_ds_s(Deductions,LearnableFact) = 
    let rid_ = relational_image(Deductions)
        msf_ = relational_image({(f_, m_) | m_ <- MSG_BODY, f_ <- unSq_(m_)})
        xsf_ = relational_image({(f_, x_) | x_@@(_,fs_) <- Deductions,
                                            f_ <- fs_})
    within {(f_, msf_(f_), rid_(f_), xsf_(f_)) | f_ <- LearnableFact}

  -- Rename events appropriately

  BUILD_INTRUDER_0(INTRUDER_0) =
    ((chase(INTRUDER_0)
      [[ hear.m_ <- hear.m_, hear.m_ <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3,
           SYSTEM_M::DIRECT_MSG4,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6
         }), 
         A_ <- diff(SenderType(l_),{Mallory}), 
         B_ <- ReceiverType(l_) ]] 
     [|{| hear |}|] STOP)
      [[ say.m_ <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3,
           SYSTEM_M::DIRECT_MSG4,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6
         }), 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 
     [|{| say |}|] STOP)

  -- Add in facts that are known initially

  SAY_KNOWN_0(IK1) = 
    (inter(IK1, ALL_SECRETS) != {} & dummy_leak -> SAY_KNOWN_0(IK1)) 
    [] dummy_send -> SAY_KNOWN_0(IK1) 
    [] dummy_receive -> SAY_KNOWN_0(IK1) 

  SAY_KNOWN(IK1) =
    SAY_KNOWN_0(IK1)
      [[ dummy_leak <- leak.f_ | f_ <- inter(IK1, ALL_SECRETS) ]]
      [[ dummy_send <- dummy_send, dummy_send <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3,
           SYSTEM_M::DIRECT_MSG4,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6
         }), components_(m_) <= IK1, 
         A_ <- diff(SenderType(l_),{Mallory}), 
         B_ <- ReceiverType(l_) ]] 
      [[ dummy_receive <- dummy_receive, dummy_receive <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3,
           SYSTEM_M::DIRECT_MSG4,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6
         }), components_(m_) <= IK1, 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 

  STOP_SET = { dummy_send, dummy_receive }

exports

  -- Types of sender and receiver of each message

  SenderType (Msg1) = Agent
  SenderType (Msg2) = Server
  SenderType (Msg3) = Agent
  SenderType (Msg4) = Agent
  SenderType (Msg5) = Server
  SenderType (Msg6) = Agent

  ReceiverType(Msg1) = Server
  ReceiverType(Msg2) = Agent
  ReceiverType(Msg3) = Agent
  ReceiverType(Msg4) = Server
  ReceiverType(Msg5) = Agent
  ReceiverType(Msg6) = Agent

  -- Intruder's initial knowledge

  IK0 = union({Alice, Bob, Mallory, Sam, SK__.(Mallory), Garbage}, TimeStamp)

  Deductions = Deductions_

  Base_Deductions = Base_Deductions_

  Close_(IK_, ded_, fact_) =
    CloseButNotFacts_(IK_, ded_, fact_, { })

  -- The method below is used to calculate IK1 and Deductions and is important
  -- when temporal checks are being done. If no check was done on f being
  -- in Facts then the infer event corresponding to a intruder send event may be hidden.
  CloseButNotFacts_(IK_, ded_, fact_, excludedFacts_) =
    let IK1_ = 
          union(IK_, {f_ | (f_,fs_) <- ded_, fs_ <= IK_ and not member(f_,excludedFacts_)})
        ded1_ = 
          {(f_,fs_) | (f_,fs_) <- ded_, not (member(f_,IK_)),
                      fs_ <= fact_}
        fact1_ = Union({IK_, {f_ | (f_,fs_) <- ded_}, Seeable_})
    within
    if card(IK_)==card(IK1_) and card(ded_)==card(ded1_)
       and card(fact_)==card(fact1_)
    then (IK_, {(f_,diff(fs_,IK_)) | (f_,fs_) <- ded_}, fact_)
    else Close_(IK1_, ded1_, fact1_)

KnowableFact = KnowableFact_ 
  -- Put components together in parallel
  INTRUDER_00(Deductions,LearnableFact) = 
    (|| (f_,ms_,fss_,ds_) : f_ms_fss_ds_s(Deductions,LearnableFact) @ 
         [AlphaL(f_,ms_,fss_,ds_)] IGNORANT(f_,ms_,fss_,ds_))

  INTRUDER_0 = INTRUDER_00(Deductions, LearnableFact) \ {|infer, tockInfer|}

  -- Set of all deductions that could occur
  COMBINED_DEDUCTIONS =
    let ds_ = INTRUDER_M::Deductions
    within -- Don't you hate hacks like this (FDR does not allow empty channel types)?
      if ds_ == {} then {(Garbage, {Garbage})} else ds_

  -- Declare channels:
  channel hear, say : MSG_BODY
  channel dummy_leak, dummy_send, dummy_receive
  UpdateableFacts = union({f_ | (f_,fs_) <- COMBINED_DEDUCTIONS},KnowableFact)
  channel tockInfer : UpdateableFacts

  -- Complete intruder

  -- Intruder used for temporal specs
  BUILD_INTRUDER'(INTRUDER_0,IK) =
    (BUILD_INTRUDER_0(INTRUDER_0) ||| SAY_KNOWN(IK)) [| STOP_SET |] STOP

  -- Intruder used for all other specs
  BUILD_INTRUDER(INTRUDER_0) = BUILD_INTRUDER'(INTRUDER_0,IK1)

endmodule

-- FDR bug: cannot have a module prefix in a channel type
Deductions' = INTRUDER_M::COMBINED_DEDUCTIONS
channel infer : Deductions'

IntruderInterface = 
  Union({
    {| receive.Mallory.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| receive.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::INPUT_MSG1,
      SYSTEM_M::INPUT_MSG2,
      SYSTEM_M::INPUT_MSG3,
      SYSTEM_M::INPUT_MSG4,
      SYSTEM_M::INPUT_MSG5,
      SYSTEM_M::INPUT_MSG6
    }) |},
    {| send.A_.Mallory.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::OUTPUT_MSG1,
      SYSTEM_M::OUTPUT_MSG2,
      SYSTEM_M::OUTPUT_MSG3,
      SYSTEM_M::OUTPUT_MSG4,
      SYSTEM_M::OUTPUT_MSG5,
      SYSTEM_M::OUTPUT_MSG6
    }) |},
    {tock}
  })

SYSTEM = 
  SYSTEM_M::SYSTEM_0 [| IntruderInterface |] INTRUDER_M::BUILD_INTRUDER(INTRUDER_M::INTRUDER_0)

-- ************************************************************************
-- *                    Specifications and Assertions                     *
-- ************************************************************************

module SECRET_M

  -- Specification for single secret

  SECRET_SPEC_0(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ ->
      (if member(Mallory, Bs_) then SECRET_SPEC_0(s_)
       else SECRET_SPEC_1(s_))
    []
    leak.s_ -> SECRET_SPEC_0(s_)
  SECRET_SPEC_1(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ -> SECRET_SPEC_1(s_)
  -- Specification for all secrets

  AlphaS(s_) = 
    Union({
      {|signal.Claim_Secret.A_.s_ | A_ <- ALL_PRINCIPALS|},
      {leak.s_}
    })
  -- Sequential version; secs_ is secrets that intruder must not learn

  SEQ_SECRET_SPEC_0(secs_) =
    scs?s_!IntIn -> SEQ_SECRET_SPEC_0(secs_)
    []
    card(secs_)<2 & scs?s_!IntNotIn ->
      SEQ_SECRET_SPEC_0(union(secs_,{s_}))
    []
    card(secs_)==2 & scs?s_:secs_!IntNotIn ->
      SEQ_SECRET_SPEC_0(secs_)
    []
    leak?s_ : diff(ALL_SECRETS,secs_) -> SEQ_SECRET_SPEC_0(secs_)

  isIntIn(S_) = if member(Mallory,S_) then IntIn else IntNotIn

  Alpha_SECRETS =
    Union({
      {|leak, signal.Claim_Secret.A_ | A_ <- HONEST|}
    })

  Alpha_SEQ_SECRETS = 
    Union({
      {|leak, scs|}
    })

exports

  SECRET_SPEC = (|| s_ : ALL_SECRETS @ [AlphaS(s_)] SECRET_SPEC_0(s_))

  datatype IncInt = IntIn | IntNotIn

  channel scs : ALL_SECRETS.IncInt

  SEQ_SECRET_SPEC = SEQ_SECRET_SPEC_0({})

  -- System for secrecy checking

  SYSTEM_S = 
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[receive.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(PK__.(A), <B, n2>), <n2>))
          <- signal.Claim_Secret.A.ALGEBRA_M::applyRenaming(n2).{B}, 
        send.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(pka, <B, n2>), <n2>))
          <- signal.Claim_Secret.B.ALGEBRA_M::applyRenaming(n2).{A} |
            pka <- ALGEBRA_M::applyRenamingToSet(addGarbage_(PublicKey)), 
            B <- Agent_renamed_, A <- Agent_renamed_, n2 <- Nonce_renamed_
      ]] \ {| env, send, receive, tock |}

  SYSTEM_S_SEQ =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[receive.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(PK__.(A), <B, n2>), <n2>))
          <- scs.ALGEBRA_M::applyRenaming(n2).isIntIn({A, B}), 
        send.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(pka, <B, n2>), <n2>))
          <- scs.ALGEBRA_M::applyRenaming(n2).isIntIn({B, A}) |
            pka <- ALGEBRA_M::applyRenamingToSet(addGarbage_(PublicKey)), 
            B <- Agent_renamed_, A <- Agent_renamed_, n2 <- Nonce_renamed_
      ]] \ {| env, send, receive, tock |}

endmodule

-- Assertion of secrecy

assert SECRET_M::SECRET_SPEC [T= SECRET_M::SYSTEM_S
assert SECRET_M::SEQ_SECRET_SPEC [T= SECRET_M::SYSTEM_S_SEQ

-- ************************************************************************
-- *                 Authentication specification number 1                *
-- ************************************************************************

module AUTH1_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateINITIATORToRESPONDERAgreement_n2_0(A) =
    signal.Running1.INITIATOR_role.A?B?n2 ->
    signal.Commit1.RESPONDER_role.B.A.n2 -> STOP

  AlphaAuthenticateINITIATORToRESPONDERAgreement_n2_0(A) =
    {|signal.Running1.INITIATOR_role.A.B,
      signal.Commit1.RESPONDER_role.B.A |
         B <- inter(Agent, HONEST)|}

  -- Specs for particular agents being authenticated

  AuthenticateINITIATORAliceToRESPONDERAgreement_n2 =
    AuthenticateINITIATORToRESPONDERAgreement_n2_0(Alice)

  AuthenticateINITIATORBobToRESPONDERAgreement_n2 =
    STOP

  -- alphabet of specification

  alphaAuthenticateINITIATORToRESPONDERAgreement_n2 =
    Union({
      AlphaAuthenticateINITIATORToRESPONDERAgreement_n2_0(Alice),
      AlphaAuthenticateINITIATORToRESPONDERAgreement_n2_0(Bob)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateINITIATORToRESPONDERAgreement_n2 =
    (AuthenticateINITIATORAliceToRESPONDERAgreement_n2
    [| inter(AlphaAuthenticateINITIATORToRESPONDERAgreement_n2_0(Alice),
             AlphaAuthenticateINITIATORToRESPONDERAgreement_n2_0(Bob)) |]
    AuthenticateINITIATORBobToRESPONDERAgreement_n2)

  -- System for authentication checking

  SYSTEM_1 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
        TimeStamp_renamed_ = ALGEBRA_M::applyRenamingToSet(TimeStamp)
    within
      SYSTEM
       [[send.A.B.ALGEBRA_M::rmb((Msg3, Encrypt.(SK__.(A), <A, Timestamp.ts, Encrypt.(pkb, <n2>)>), <n2>)) <-
          signal.Running1.INITIATOR_role.A.B.n2,  
        send.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(pka, <B, n2>), <n2>)) <-
          signal.Commit1.RESPONDER_role.B.A.n2 |
            A <- Agent_renamed_, B <- Agent_renamed_, n2 <- Nonce_renamed_, 
            Timestamp.ts <- TimeStamp_renamed_, 
            pkb <- ALGEBRA_M::applyRenamingToSet(addGarbage_(PublicKey)), 
            pka <- ALGEBRA_M::applyRenamingToSet(addGarbage_(PublicKey))
      ]]
      \ diff(Events, alphaAuthenticateINITIATORToRESPONDERAgreement_n2)

endmodule

assert AUTH1_M::AuthenticateINITIATORToRESPONDERAgreement_n2 [T= 
       AUTH1_M::SYSTEM_1

-- ************************************************************************
-- *                 Authentication specification number 2                *
-- ************************************************************************

module AUTH2_M

  -- Spec parameterized by name of agent being authenticated

  AuthenticateRESPONDERToINITIATORAgreement_n2_0(B) =
    signal.Running2.RESPONDER_role.B?A?n2 ->
    signal.Commit2.INITIATOR_role.A.B.n2 -> STOP

  AlphaAuthenticateRESPONDERToINITIATORAgreement_n2_0(B) =
    {|signal.Running2.RESPONDER_role.B.A,
      signal.Commit2.INITIATOR_role.A.B |
         A <- inter(Agent, HONEST)|}

  -- Specs for particular agents being authenticated

  AuthenticateRESPONDERAliceToINITIATORAgreement_n2 =
    STOP

  AuthenticateRESPONDERBobToINITIATORAgreement_n2 =
    AuthenticateRESPONDERToINITIATORAgreement_n2_0(Bob)

  -- alphabet of specification

  alphaAuthenticateRESPONDERToINITIATORAgreement_n2 =
    Union({
      AlphaAuthenticateRESPONDERToINITIATORAgreement_n2_0(Alice),
      AlphaAuthenticateRESPONDERToINITIATORAgreement_n2_0(Bob)
    })

exports

  -- Specs for all agents being authenticated

  AuthenticateRESPONDERToINITIATORAgreement_n2 =
    (AuthenticateRESPONDERAliceToINITIATORAgreement_n2
    [| inter(AlphaAuthenticateRESPONDERToINITIATORAgreement_n2_0(Alice),
             AlphaAuthenticateRESPONDERToINITIATORAgreement_n2_0(Bob)) |]
    AuthenticateRESPONDERBobToINITIATORAgreement_n2)

  -- System for authentication checking

  SYSTEM_2 =
    let Agent_renamed_ = ALGEBRA_M::applyRenamingToSet(Agent)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
      SYSTEM
       [[send.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(pka, <B, n2>), <n2>)) <-
          signal.Running2.RESPONDER_role.B.A.n2,  
        receive.B.A.ALGEBRA_M::rmb((Msg6, Encrypt.(PK__.(A), <B, n2>), <n2>)) <-
          signal.Commit2.INITIATOR_role.A.B.n2 |
            B <- Agent_renamed_, A <- Agent_renamed_, n2 <- Nonce_renamed_, 
            pka <- ALGEBRA_M::applyRenamingToSet(addGarbage_(PublicKey))
      ]]
      \ diff(Events, alphaAuthenticateRESPONDERToINITIATORAgreement_n2)

endmodule

assert AUTH2_M::AuthenticateRESPONDERToINITIATORAgreement_n2 [T= 
       AUTH2_M::SYSTEM_2

