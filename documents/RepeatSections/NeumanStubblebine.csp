-- CSP script produced using Casper version 2.0

-- -- Neuman Stubblebine, simplified to reduce state space
-- 
-- #Free variables
-- 
-- a, b : User
-- s : Server
-- 
-- --ts : TimeStamp
-- kab : SessionKey
-- na, nb, ma, mb : Nonce
-- SKey : User -> ServerKey
-- InverseKeys = (SKey,SKey), (kab,kab)
-- 
-- #Processes
-- 
-- INITIATOR(a, na, ma) knows SKey(a) generates na, ma
-- RESPONDER(b, s, nb, mb) knows SKey(b) generates nb, mb
-- SERVER(s, kab) knows SKey generates kab
-- 
-- #Protocol description
-- 
-- 0.   -> a : b
-- 1a. a -> b : a
-- 2. b -> s : b, {a}{SKey(b)}
-- -- Split message 3
-- 3b. s -> a : {b, kab}{SKey(a)} 
-- 3c. s -> a : {a, kab}{SKey(b)} % tkt
-- 3d. s -> b : {a, kab}{SKey(b)}
-- 
-- 
-- -- Start repeated section
-- 5. a -> b : ma, tkt % {a, kab}{SKey(b)}
-- 6. b -> a : mb, {ma}{kab}
-- 7. a -> b : {mb}{kab}
-- 
-- #Specification
-- -- PASS
-- Secret(a, kab, [b, s])
-- 
-- -- FAIL
-- NonInjectiveAgreement(b, a, [kab])
-- -- FAIL
-- Agreement(b, a, [kab])
-- 
-- #Actual variables
-- 
-- 
-- Mallory : User
-- 
-- #Functions
-- 
-- symbolic SKey
-- 
-- #System
-- 
-- GenerateSystemForRepeatSection = 5 to 7
-- 
-- #Intruder Information
-- 
-- Intruder = Mallory
-- IntruderKnowledge = {Mallory, SKey(Mallory)}
-- UnboundParallel = True

-- ************************************************************************
-- *                                Types                                 *
-- ************************************************************************

-- Main datatype, representing all possible messages

datatype Encryption =
  Alice | Bob | Nonce_P | SessionKey_P | kab_S | SessionKey_S | ma_E1 | 
  ma_E2 | Mallory | Garbage | SKey__.User | Sq.Seq(Encryption) | 
  Encrypt.(ALL_KEYS,Seq(Encryption)) | Hash.(HashFunction, Seq(Encryption)) | 
  Xor.(Encryption, Encryption) | Sent.(Encryption, Seq(Encryption)) | 
  AuthTaggedSignals1.AUTH1_M__TaggedSignals1 | 
  AuthTaggedSignals2.AUTH2_M__TaggedSignals2

-- Some indirection to get around FDR parsing bugs with :: in datatype declarations
AUTH1_M__TaggedSignals1 = AUTH1_M::TaggedSignals1
AUTH2_M__TaggedSignals2 = AUTH2_M::TaggedSignals2

-- All keys and hashfunctions in the system

ALL_KEYS :: {Encryption}
ALL_KEYS = Union({SessionKey, ServerKey})

ASYMMETRIC_KEYS = {k_, inverse(k_) | k_ <- ALL_KEYS, k_!=inverse(k_)}
HashFunction :: {Encryption}
HashFunction = {}

-- All atoms in the system

ATOM = {Alice, Bob, Nonce_P, SessionKey_P, kab_S, SessionKey_S, ma_E1, 
         ma_E2, Mallory, Garbage}

-- Some standard functions

channel dummyrun_
RUN(X_) = 
  let drun = dummyrun_ -> drun
  within drun[[dummyrun_ <- x_ | x_ <- X_]]

encrypt(m_,k_) = Encrypt.(k_,m_)
decrypt(Encrypt.(k1_,m_),k_) = if k_ == inverse(k1_) then m_ else <Garbage>
decrypt(_,_) = <Garbage>
decryptable(Encrypt.(k1_,m_),k_) = k_ == inverse(k1_) 
decryptable(_,_) = false
nth(ms_,n_) = if n_ == 1 then head(ms_) else nth(tail(ms_), n_ - 1)

-- add Garbage to a set that contains and encryption,
-- hash function application of Vernam encryption

addGarbage_(S_) =
  if S_=={} then {Garbage}
  else Union({S_, {Garbage | Encrypt._ <- S_}, 
             {Garbage | Hash._ <- S_},
             {Garbage | Xor._ <- S_}})

-- Definitions of user supplied functions

SKey(arg_1_) = SKey__.(arg_1_)

-- Inverses of functions

inverse(SessionKey_P) = SessionKey_P
inverse(kab_S) = kab_S
inverse(SessionKey_S) = SessionKey_S
inverse(SKey__.arg_) = SKey__.arg_

-- Types in system

User = {Alice, Bob, Mallory}
Server = {Alice}
Nonce = {Nonce_P, Nonce_P, ma_E1, ma_E2}
SessionKey = {SessionKey_P, kab_S, SessionKey_S}
ServerKey = {SKey(arg_1_) | arg_1_ <- User}


-- ************************************************************************
-- *                               Messages                               *
-- ************************************************************************

-- Message labels

datatype Labels =
  Msg1a | Msg2 | Msg3b | Msg3c | Msg3d | Msg5 | Msg6 | Msg7 | Env0

MSG_BODY = {ALGEBRA_M::applyRenaming(m_) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO}

-- Type of principals

ALL_PRINCIPALS = Union({User, Server})

INTRUDER = Mallory

HONEST = diff(ALL_PRINCIPALS, {INTRUDER})

-- Channel declarations

INPUT_MSG = SYSTEM_M::INPUT_MSG
OUTPUT_MSG = SYSTEM_M::OUTPUT_MSG
DIRECT_MSG = SYSTEM_M::DIRECT_MSG
ENV_MSG :: {(Labels, Encryption, <Encryption>)}
ENV_MSG = SYSTEM_M::ENV_MSG

channel receive: ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_MSG
channel send: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_MSG
channel env : ALL_PRINCIPALS.ENV_MSG
channel error
channel start, close : HONEST.HONEST_ROLE

channel leak : addGarbage_(ALL_SECRETS)
-- Roles of agents

datatype ROLE = INITIATOR_role | RESPONDER_role | SERVER_role

HONEST_ROLE = ROLE

-- Secrets in the protocol

ALL_SECRETS_0 = SessionKey
ALL_SECRETS = addGarbage_(ALGEBRA_M::applyRenamingToSet(ALL_SECRETS_0))

-- Define type of signals, and declare signal channel

datatype Signal = 
  Claim_Secret.ALL_PRINCIPALS.ALL_SECRETS.Set(ALL_PRINCIPALS) |
  Running1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey |
  Commit1.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey |
  RunCom1.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey.SessionKey |
  Running2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey |
  Commit2.HONEST_ROLE.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey |
  RunCom2.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey.SessionKey

channel signal : Signal

Fact_1 = 
  Union({
    {Garbage},
    User,
    Server,
    SessionKey,
    Nonce,
    ServerKey,
    {Encrypt.(SKey__.(b), <a>) |
       a <- User, b <- User},
    {Encrypt.(SKey__.(b), <a, kab>) |
       a <- User, b <- User, kab <- SessionKey},
    {Encrypt.(kab, <ma>) |
       kab <- SessionKey, ma <- Nonce},
    {Encrypt.(SKey__.(a), <b, kab>) |
       a <- User, b <- User, kab <- SessionKey},
    {Encrypt.(kab, <mb>) |
       kab <- SessionKey, mb <- Nonce},
    {Sq.<b, Encrypt.(SKey__.(b), <a>)> |
       a <- User, b <- User},
    {Sq.<ma, tkt> |
       ma <- Nonce, 
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
    {Sq.<ma, Encrypt.(SKey__.(b), <a, kab>)> |
       a <- User, b <- User, kab <- SessionKey, ma <- Nonce},
    {Sq.<mb, Encrypt.(kab, <ma>)> |
       kab <- SessionKey, ma <- Nonce, mb <- Nonce},
    {Sent.(a, <a, b>) |
       a <- User, b <- User},
    {Sent.(Sq.<b, Encrypt.(SKey__.(b), <a>)>, <b, s, a>) |
       a <- User, b <- User, s <- Server},
    {Sent.(Encrypt.(SKey__.(a), <b, kab>), <s, a, b, kab>) |
       a <- User, b <- User, kab <- SessionKey, s <- Server},
    {Sent.(tkt, <s, a, b, kab>) |
       a <- User, b <- User, kab <- SessionKey, s <- Server, 
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
    {Sent.(Encrypt.(SKey__.(b), <a, kab>), <s, b, a, kab>) |
       a <- User, b <- User, kab <- SessionKey, s <- Server},
    {Sent.(Sq.<ma, tkt>, <a, b, kab, tkt, ma>) |
       a <- User, b <- User, kab <- SessionKey, ma <- Nonce, 
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
    {Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab, ma, mb>) |
       a <- User, b <- User, kab <- SessionKey, ma <- Nonce, mb <- Nonce, 
       s <- Server},
    {Sent.(Encrypt.(kab, <mb>), <a, b, kab, tkt, ma, mb>) |
       a <- User, b <- User, kab <- SessionKey, ma <- Nonce, mb <- Nonce, 
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
    { sm_ | (sm_,_) <- INTRUDER_M::All_External_and_Internal_Deductions}
  })

external relational_inverse_image
external relational_image
transparent chase
transparent sbisim

-- ************************************************************************
-- *                            Honest Agents                             *
-- ************************************************************************

module SYSTEM_M

  -- types of messages sent and received by agents, as they are
  -- considered by those agents

  input_proj((l_,m_,se_,re_)) = (l_,m_,re_)
  rmb_input_proj((l_,m_,se_,re_)) = ALGEBRA_M::rmb((l_,m_,re_))
  output_proj((l_,m_,se_,re_)) = (l_,m_,se_)

  INPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  INPUT_INT_MSG = 
    
    Union({
      INPUT_INT_MSG1a,
      INPUT_INT_MSG2,
      INPUT_INT_MSG3b,
      INPUT_INT_MSG3c,
      INPUT_INT_MSG3d,
      INPUT_INT_MSG5,
      INPUT_INT_MSG6,
      INPUT_INT_MSG7
    })

  OUTPUT_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  OUTPUT_INT_MSG = 
    
    Union({
      OUTPUT_INT_MSG1a,
      OUTPUT_INT_MSG2,
      OUTPUT_INT_MSG3b,
      OUTPUT_INT_MSG3c,
      OUTPUT_INT_MSG3d,
      OUTPUT_INT_MSG5,
      OUTPUT_INT_MSG6,
      OUTPUT_INT_MSG7
    })

  -- INITIATOR

  INITIATOR_0(a, na, ma) =
    [] b : User @ member((Env0, b,<>), ENV_INT_MSG0) & 
      env_I.a.(Env0, b,<>) ->
    member((Msg1a, a,<>), OUTPUT_INT_MSG1a) & output.a.b.(Msg1a, a,<>) ->
    [] kab : SessionKey @ [] s : Server @ 
      member((Msg3b, Encrypt.(SKey__.(a), <b, kab>),<>), INPUT_INT_MSG3b) & 
      input.s.a.(Msg3b, Encrypt.(SKey__.(a), <b, kab>),<>) ->
    
    [] tkt : addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey}) @ 
      member((Msg3c, tkt,<>), INPUT_INT_MSG3c) & 
      input.s.a.(Msg3c, tkt,<>) ->
    member((Msg5, Sq.<ma, tkt>,<>), OUTPUT_INT_MSG5) & 
    output.a.b.(Msg5, Sq.<ma, tkt>,<>) ->
    [] mb : Nonce @ 
      member((Msg6, Sq.<mb, Encrypt.(inverse(kab), <ma>)>,<>), INPUT_INT_MSG6) & 
      input.b.a.(Msg6, Sq.<mb, Encrypt.(inverse(kab), <ma>)>,<>) ->
    member((Msg7, Encrypt.(kab, <mb>),<kab, s>), OUTPUT_INT_MSG7) & 
    output.a.b.(Msg7, Encrypt.(kab, <mb>),<kab, s>) ->
    SKIP

  INITIATOR_1(a, na, ma) = INITIATOR_0(a, na, ma)

  INITIATOR(a, na, ma) =
    INITIATOR_1(a, na, ma)
      [[input.s.a.(l_,m_,re_) <- receive.s.a.ALGEBRA_M::rmb((l_,m_,re_)) |
          s <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO3b]]
      [[input.s.a.(l_,m_,re_) <- receive.s.a.ALGEBRA_M::rmb((l_,m_,re_)) |
          s <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO3c]]
      [[input.b.a.(l_,m_,re_) <- receive.b.a.ALGEBRA_M::rmb((l_,m_,re_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO6]]
      [[output.a.b.(l_,m_,se_) <- send.a.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO1a]]
      [[output.a.b.(l_,m_,se_) <- send.a.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO5]]
      [[output.a.b.(l_,m_,se_) <- send.a.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO7]]
      [[env_I.a.m_ <- env.a.ALGEBRA_M::rmb(m_) |
          m_ <- ENV_INT_MSG0]]

  -- RESPONDER

  RESPONDER_0(b, s, nb, mb) =
    [] a : User @ member((Msg1a, a,<>), INPUT_INT_MSG1a) & 
      input.a.b.(Msg1a, a,<>) ->
    member((Msg2, Sq.<b, Encrypt.(SKey__.(b), <a>)>,<>), OUTPUT_INT_MSG2) & 
    output.b.s.(Msg2, Sq.<b, Encrypt.(SKey__.(b), <a>)>,<>) ->
    [] kab : SessionKey @ 
      member((Msg3d, Encrypt.(SKey__.(b), <a, kab>),<>), INPUT_INT_MSG3d) & 
      input.s.b.(Msg3d, Encrypt.(SKey__.(b), <a, kab>),<>) ->
    [] ma : Nonce @ 
      member((Msg5, Sq.<ma, Encrypt.(SKey__.(b), <a, kab>)>,<>), INPUT_INT_MSG5) & 
      input.a.b.(Msg5, Sq.<ma, Encrypt.(SKey__.(b), <a, kab>)>,<>) ->
    member((Msg6, Sq.<mb, Encrypt.(kab, <ma>)>,<kab>), OUTPUT_INT_MSG6) & 
    output.b.a.(Msg6, Sq.<mb, Encrypt.(kab, <ma>)>,<kab>) ->
    input.a.b.(Msg7, Encrypt.(inverse(kab), <mb>),<>) ->
    SKIP

  RESPONDER_1(b, s, nb, mb) = RESPONDER_0(b, s, nb, mb)

  RESPONDER(b, s, nb, mb) =
    RESPONDER_1(b, s, nb, mb)
      [[input.a.b.(l_,m_,re_) <- receive.a.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO1a]]
      [[input.s.b.(l_,m_,re_) <- receive.s.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          s <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO3d]]
      [[input.a.b.(l_,m_,re_) <- receive.a.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO5]]
      [[input.a.b.(l_,m_,re_) <- receive.a.b.ALGEBRA_M::rmb((l_,m_,re_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO7]]
      [[output.b.s.(l_,m_,se_) <- send.b.s.ALGEBRA_M::rmb((l_,m_,se_)) |
          s <- Server, (l_,m_,se_,re_) <- INT_MSG_INFO2]]
      [[output.b.a.(l_,m_,se_) <- send.b.a.ALGEBRA_M::rmb((l_,m_,se_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO6]]

  -- SERVER

  SERVER_0(s, kab) =
    [] a : User @ [] b : User @ 
      member((Msg2, Sq.<b, Encrypt.(SKey__.(b), <a>)>,<>), INPUT_INT_MSG2) & 
      input.b.s.(Msg2, Sq.<b, Encrypt.(SKey__.(b), <a>)>,<>) ->
    member((Msg3b, Encrypt.(SKey__.(a), <b, kab>),<>), OUTPUT_INT_MSG3b) & 
    output.s.a.(Msg3b, Encrypt.(SKey__.(a), <b, kab>),<>) ->
    member((Msg3c, Encrypt.(SKey__.(b), <a, kab>),<>), OUTPUT_INT_MSG3c) & 
    output.s.a.(Msg3c, Encrypt.(SKey__.(b), <a, kab>),<>) ->
    member((Msg3d, Encrypt.(SKey__.(b), <a, kab>),<>), OUTPUT_INT_MSG3d) & 
    output.s.b.(Msg3d, Encrypt.(SKey__.(b), <a, kab>),<>) ->
    SKIP

  SERVER_1(s, kab) = SERVER_0(s, kab)

  SERVER(s, kab) =
    SERVER_1(s, kab)
      [[input.b.s.(l_,m_,re_) <- receive.b.s.ALGEBRA_M::rmb((l_,m_,re_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO2]]
      [[output.s.a.(l_,m_,se_) <- send.s.a.ALGEBRA_M::rmb((l_,m_,se_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO3b]]
      [[output.s.a.(l_,m_,se_) <- send.s.a.ALGEBRA_M::rmb((l_,m_,se_)) |
          a <- User, (l_,m_,se_,re_) <- INT_MSG_INFO3c]]
      [[output.s.b.(l_,m_,se_) <- send.s.b.ALGEBRA_M::rmb((l_,m_,se_)) |
          b <- User, (l_,m_,se_,re_) <- INT_MSG_INFO3d]]

  -- Process representing Alice

  Alpha_Alice = 
    Union({
      {|env.Alice|},
      {|send.Alice.A_ | A_ <- ALL_PRINCIPALS|}
    })

  AGENT_Alice = STOP

  -- Process representing Bob

  Alpha_INITIATOR_Bob = 
    Union({
      {|env.Bob.m_ | m_ <- ENV_MSG0|},
      {|send.Bob.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG1a|},
      {|send.Bob.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG5|},
      {|send.Bob.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- OUTPUT_MSG7|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3b|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3c|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG6|}
    })

  INITIATOR_Bob = ((INITIATOR(Bob, Nonce_P, ma_E1) ; STOP)
    |||
    (INITIATOR(Bob, Nonce_P, ma_E2) ; STOP))

  Alpha_Bob = 
    Union({
      {|env.Bob|},
      {|send.Bob.A_ | A_ <- ALL_PRINCIPALS|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3b|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG3c|},
      {|receive.A_.Bob.m_ | A_ <- ALL_PRINCIPALS, m_ <- INPUT_MSG6|}
    })

  AGENT_Bob =
    (INITIATOR_Bob [Alpha_INITIATOR_Bob || {} ] STOP)

exports

  -- Messages as they appear on the network; each messages is renamed
  -- (by rmb) to the representative member of its equivalence class

  INPUT_MSG1a = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG1a}
  INPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG2}
  INPUT_MSG3b = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG3b}
  INPUT_MSG3c = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG3c}
  INPUT_MSG3d = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG3d}
  INPUT_MSG5 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG5}
  INPUT_MSG6 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG6}
  INPUT_MSG7 = {ALGEBRA_M::rmb(m_) | m_ <- INPUT_INT_MSG7}

  OUTPUT_MSG1a = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG1a}
  OUTPUT_MSG2 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG2}
  OUTPUT_MSG3b = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG3b}
  OUTPUT_MSG3c = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG3c}
  OUTPUT_MSG3d = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG3d}
  OUTPUT_MSG5 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG5}
  OUTPUT_MSG6 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG6}
  OUTPUT_MSG7 = {ALGEBRA_M::rmb(m_) | m_ <- OUTPUT_INT_MSG7}

  DIRECT_MSG1a = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO1a}
  DIRECT_MSG2 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO2}
  DIRECT_MSG3b = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO3b}
  DIRECT_MSG3c = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO3c}
  DIRECT_MSG3d = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO3d}
  DIRECT_MSG5 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO5}
  DIRECT_MSG6 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO6}
  DIRECT_MSG7 = {ALGEBRA_M::rmb4(m_) | m_ <- INT_MSG_INFO7}

  -- Environmental messages

  ENV_INT_MSG0 :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG0 = 
    {(Env0, b, <>) |
       b <- User}

  ENV_MSG0 = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG0}

  ENV_INT_MSG :: {(Labels, Encryption, <Encryption>)}
  ENV_INT_MSG = ENV_INT_MSG0

  -- information about messages sent and received by agents, including
  -- extras fields for both agents

  INT_MSG_INFO1a_0 = 
    {(Msg1a, a, <>, <>) |
       a <- User}
  INT_MSG_INFO1a = 
    {(Msg1a, m, s, r) | (Msg1a,m,s,r) <- INT_MSG_INFO1a_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO2_0 = 
    {(Msg2, Sq.<b, Encrypt.(SKey__.(b), <a>)>, <>, <>) |
       a <- User, b <- User}
  INT_MSG_INFO2 = 
    {(Msg2, m, s, r) | (Msg2,m,s,r) <- INT_MSG_INFO2_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO3b_0 = 
    {(Msg3b, Encrypt.(SKey__.(a), <b, kab>), <>, <>) |
       a <- User, b <- User, kab <- SessionKey}
  INT_MSG_INFO3b = 
    {(Msg3b, m, s, r) | (Msg3b,m,s,r) <- INT_MSG_INFO3b_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO3c_0 = 
    {(Msg3c, tkt, <>, <>) |
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})}
  INT_MSG_INFO3c = 
    {(Msg3c, m, s, r) | (Msg3c,m,s,r) <- INT_MSG_INFO3c_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO3d_0 = 
    {(Msg3d, Encrypt.(SKey__.(b), <a, kab>), <>, <>) |
       a <- User, b <- User, kab <- SessionKey}
  INT_MSG_INFO3d = 
    {(Msg3d, m, s, r) | (Msg3d,m,s,r) <- INT_MSG_INFO3d_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO5_0 = 
    {(Msg5, Sq.<ma, tkt>, <>, <>) |
       ma <- Nonce, 
       tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})}
  INT_MSG_INFO5 = 
    {(Msg5, m, s, r) | (Msg5,m,s,r) <- INT_MSG_INFO5_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO6_0 = 
    {(Msg6, Sq.<mb, Encrypt.(kab, <ma>)>, <kab>, <>) |
       kab <- SessionKey, ma <- Nonce, mb <- Nonce}
  INT_MSG_INFO6 = 
    {(Msg6, m, s, r) | (Msg6,m,s,r) <- INT_MSG_INFO6_0,
      member(m,INTRUDER_M::KnowableFact)}
  INT_MSG_INFO7_0 = 
    {(Msg7, Encrypt.(kab, <mb>), <kab, s>, <>) |
       kab <- SessionKey, s <- Server, mb <- Nonce}
  INT_MSG_INFO7 = 
    {(Msg7, m, s, r) | (Msg7,m,s,r) <- INT_MSG_INFO7_0,
      member(m,INTRUDER_M::KnowableFact)}

  ENV_MSG = {ALGEBRA_M::rmb(m_) | m_ <- ENV_INT_MSG}

  INT_MSG_INFO :: {(Labels, Encryption, <Encryption>, <Encryption>)}
  INT_MSG_INFO = 
    Union({
      INT_MSG_INFO1a,
      INT_MSG_INFO2,
      INT_MSG_INFO3b,
      INT_MSG_INFO3c,
      INT_MSG_INFO3d,
      INT_MSG_INFO5,
      INT_MSG_INFO6,
      INT_MSG_INFO7
    })
  INPUT_INT_MSG1a = { input_proj(mt_) | mt_ <- INT_MSG_INFO1a }
  INPUT_INT_MSG2 = { input_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  INPUT_INT_MSG3b = { input_proj(mt_) | mt_ <- INT_MSG_INFO3b }
  INPUT_INT_MSG3c = { input_proj(mt_) | mt_ <- INT_MSG_INFO3c }
  INPUT_INT_MSG3d = { input_proj(mt_) | mt_ <- INT_MSG_INFO3d }
  INPUT_INT_MSG5 = { input_proj(mt_) | mt_ <- INT_MSG_INFO5 }
  INPUT_INT_MSG6 = { input_proj(mt_) | mt_ <- INT_MSG_INFO6 }
  INPUT_INT_MSG7 = { input_proj(mt_) | mt_ <- INT_MSG_INFO7 }

  INPUT_MSG = 
    Union({
      INPUT_MSG1a,
      INPUT_MSG2,
      INPUT_MSG3b,
      INPUT_MSG3c,
      INPUT_MSG3d,
      INPUT_MSG5,
      INPUT_MSG6,
      INPUT_MSG7
    })
  OUTPUT_INT_MSG1a = { output_proj(mt_) | mt_ <- INT_MSG_INFO1a }
  OUTPUT_INT_MSG2 = { output_proj(mt_) | mt_ <- INT_MSG_INFO2 }
  OUTPUT_INT_MSG3b = { output_proj(mt_) | mt_ <- INT_MSG_INFO3b }
  OUTPUT_INT_MSG3c = { output_proj(mt_) | mt_ <- INT_MSG_INFO3c }
  OUTPUT_INT_MSG3d = { output_proj(mt_) | mt_ <- INT_MSG_INFO3d }
  OUTPUT_INT_MSG5 = { output_proj(mt_) | mt_ <- INT_MSG_INFO5 }
  OUTPUT_INT_MSG6 = { output_proj(mt_) | mt_ <- INT_MSG_INFO6 }
  OUTPUT_INT_MSG7 = { output_proj(mt_) | mt_ <- INT_MSG_INFO7 }

  OUTPUT_MSG = 
    Union({
      OUTPUT_MSG1a,
      OUTPUT_MSG2,
      OUTPUT_MSG3b,
      OUTPUT_MSG3c,
      OUTPUT_MSG3d,
      OUTPUT_MSG5,
      OUTPUT_MSG6,
      OUTPUT_MSG7
    })
  DIRECT_MSG = 
  Union({
    DIRECT_MSG1a,
    DIRECT_MSG2,
    DIRECT_MSG3b,
    DIRECT_MSG3c,
    DIRECT_MSG3d,
    DIRECT_MSG5,
    DIRECT_MSG6,
    DIRECT_MSG7
  })

  channel input:ALL_PRINCIPALS.ALL_PRINCIPALS.INPUT_INT_MSG
  channel output: ALL_PRINCIPALS.ALL_PRINCIPALS.OUTPUT_INT_MSG
  channel env_I : ALL_PRINCIPALS.ENV_INT_MSG

  -- Complete system

  SYSTEM_0 =
    (AGENT_Alice
      [Alpha_Alice||Alpha_Bob]
    AGENT_Bob)

endmodule

-- ************************************************************************
-- *                               Algebra                                *
-- ************************************************************************

module ALGEBRA_M

  -- Algebraic laws, defined as a set of pairs

  laws = {(Garbage, Garbage)}

  -- Calculate transitive closure of algebraic laws, and select
  -- representative member of each equivalence class

  external mtransclose
  renaming = mtransclose(laws, Fact_1)
  ren = relational_inverse_image(renaming)

  -- function that renames non-sequential fact to representative member

  applyRenaming0(a_) =
    let S_ = ren(a_)
    within if card(S_)==0 then a_ else elsing(S_)

  elsing({x_}) = x_

  domain = {a_ | (_,a_) <- renaming}

exports

  -- function that renames arbitrary fact to representative member

  applyRenaming(Sq.ms_) =
    if member(Sq.ms_, Fact_1) then applyRenaming0(Sq.ms_) 
    else Sq.<applyRenaming0(m_) | m_ <- ms_>
  applyRenaming(a_) = applyRenaming0(a_)

  -- function that renames (label, fact, extras) triples

  rmb((l_,m_,extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(extras_))
  rmb4((l_,m_,s_extras_,r_extras_)) = 
    (l_, applyRenaming(m_), applyRenamingToSeq(s_extras_), 
     applyRenamingToSeq(r_extras_))

  -- lift renaming to sets and to deductions

  applyRenamingToSet(X_) =
    union({elsing(ren(a_)) | a_ <- inter(X_,domain)},  diff(X_, domain))

  applyRenamingToSeq(X_) = <applyRenaming(e_) | e_ <- X_>

  applyRenamingToDeductions(S_) =
    {(applyRenaming0(f_), applyRenamingToSet(X_)) | (f_,X_) <- S_}

endmodule

-- ************************************************************************
-- *                             The Intruder                             *
-- ************************************************************************

module INTRUDER_M

  -- Unbound Parallel functions and sets, necessary for deductions

  honest(x) = x != Mallory

  -- Intruder's deductions

  unSq_ (Sq.ms_) = set(ms_)
  unSq_ (m_) = {m_}

  unknown_(S_) = diff(S_, IK0)

  Base_Deductions_ =
    Union({SqDeductions, UnSqDeductions, 
           EncryptionDeductions, DecryptionDeductions,
           VernEncDeductions, VernDecDeductions, 
           FnAppDeductions, HashDeductions,
           SentDeductions, All_Internal_Deductions, UserDeductions})

  SqDeductions =
    {(Sq.fs_, unknown_(set(fs_))) | Sq.fs_ <- Fact_1}

  UnSqDeductions =
    {(f_, unknown_({Sq.fs_})) | Sq.fs_ <- Fact_1, f_ <- unknown_(set(fs_))}

  EncryptionDeductions =
    {(Encrypt.(k_,fs_), unknown_(union({k_}, set(fs_)))) | 
        Encrypt.(k_,fs_) <- Fact_1}

  DecryptionDeductions =
    {(f_, unknown_({Encrypt.(k_,fs_), inverse(k_)})) |
        Encrypt.(k_,fs_) <- Fact_1, f_ <- unknown_(set(fs_))}

  VernEncDeductions =
    {(Xor.(m1_,m2_), unknown_(union(unSq_(m1_), unSq_(m2_)))) | 
        Xor.(m1_,m2_) <- Fact_1}

  VernDecDeductions =
      {(m11_, union(unknown_(unSq_(m2_)), {Xor.(m1_,m2_)})) | 
         Xor.(m1_,m2_) <- Fact_1, m11_ <- unSq_(m1_)}

  HashDeductions = {(Hash.(f_, ms_), set(ms_)) | Hash.(f_, ms_) <- Fact_1}

  -- Unbound Parallel Deductions

  SentDeductions = {(m_, {Sent.(m_,fs_)}) | Sent.(m_,fs_) <- Fact_1}

  -- The paramaterised deductions

  deductions_INITIATOR_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( Sent.(a, <a, b>), {  })},
      {( Sent.(Sq.<ma, tkt>, <a, b, kab, tkt, ma>), 
        { Encrypt.(SKey__.(a), <b, kab>), tkt, Sent.(a, <a, b>) })
          | tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
      {( Sent.(Encrypt.(kab, <mb>), <a, b, kab, tkt, ma, mb>), 
        { Sq.<mb, Encrypt.(kab, <ma>)>, Sent.(Sq.<ma, tkt>, <a, b, kab, tkt, ma>) })
          | tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})}
    })

  -- Deductions for internalised INITIATOR running with honest
  -- agent
  deductions_INITIATOR_with_honest =
    Union({
      deductions_INITIATOR_0(a, na, ma, b, s, nb, mb, kab) |
        b <- User, s <- Server, nb <- Nonce, mb <- Nonce, kab <- SessionKey, a <- inter(User,HONEST), na <- {Nonce_P}, ma <- {Nonce_P}, honest(b) and honest(s)
      })

  -- Deductions for internalised INITIATOR running with dishonest
  -- agent.
  deductions_INITIATOR_with_dishonest =
    Union({
      deductions_INITIATOR_0(a, na, ma, b, s, nb, mb, kab) |
        b <- User, s <- Server, nb <- Nonce, mb <- Nonce, kab <- SessionKey, a <- inter(User,HONEST), na <- {Nonce_P}, ma <- {Nonce_P}, not(honest(b) and honest(s))
      })

  -- Deductions for external INITIATOR running with any agent
  -- These are used to better approximate KnowableFact so as to reduce the
  -- size of LearnableFact.
  deductions_INITIATOR_external_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( a, {  })},
      {( Sq.<ma, tkt>, { Encrypt.(SKey__.(a), <b, kab>), tkt, a })
          | tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})},
      {( Encrypt.(kab, <mb>), { Sq.<mb, Encrypt.(kab, <ma>)>, Sq.<ma, tkt> })
          | tkt <- addGarbage_({Encrypt.(SKey__.(b), <a, kab>) | a <- User, b <- User, kab <- SessionKey})}
    })

  deductions_INITIATOR_external = 
    Union({
      deductions_INITIATOR_external_0(a, na, ma, b, s, nb, mb, kab) | 
        b <- User, s <- Server, nb <- Nonce, mb <- Nonce, kab <- SessionKey, a <- {Bob}, na <- {ma_E1, ma_E2}, ma <- {ma_E1, ma_E2}
    })

  -- The paramaterised deductions

  deductions_RESPONDER_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( Sent.(Sq.<b, Encrypt.(SKey__.(b), <a>)>, <b, s, a>), { a })},
      {( Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab, ma, mb>), 
        { Encrypt.(SKey__.(b), <a, kab>), Sq.<ma, Encrypt.(SKey__.(b), <a, kab>)>, Sent.(Sq.<b, Encrypt.(SKey__.(b), <a>)>, <b, s, a>) })}
    })

  -- Deductions for internalised RESPONDER running with honest
  -- agent
  deductions_RESPONDER_with_honest =
    Union({
      deductions_RESPONDER_0(a, na, ma, b, s, nb, mb, kab) |
        a <- User, na <- Nonce, ma <- Nonce, kab <- SessionKey, b <- inter(User,HONEST), s <- Server, nb <- {Nonce_P}, mb <- {Nonce_P}, honest(a)
      })

  -- Deductions for internalised RESPONDER running with dishonest
  -- agent.
  deductions_RESPONDER_with_dishonest =
    Union({
      deductions_RESPONDER_0(a, na, ma, b, s, nb, mb, kab) |
        a <- User, na <- Nonce, ma <- Nonce, kab <- SessionKey, b <- inter(User,HONEST), s <- Server, nb <- {Nonce_P}, mb <- {Nonce_P}, not(honest(a))
      })

  -- Deductions for external RESPONDER running with any agent
  -- These are used to better approximate KnowableFact so as to reduce the
  -- size of LearnableFact.
  deductions_RESPONDER_external_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( Sq.<b, Encrypt.(SKey__.(b), <a>)>, { a })},
      {( Sq.<mb, Encrypt.(kab, <ma>)>, 
        { Encrypt.(SKey__.(b), <a, kab>), Sq.<ma, Encrypt.(SKey__.(b), <a, kab>)>, Sq.<b, Encrypt.(SKey__.(b), <a>)> })}
    })

  deductions_RESPONDER_external = 
    Union({
      deductions_RESPONDER_external_0(a, na, ma, b, s, nb, mb, kab) | 
        a <- User, na <- Nonce, ma <- Nonce, kab <- SessionKey, b <- {}, s <- Server, nb <- {ma_E1, ma_E2}, mb <- {ma_E1, ma_E2}
    })

  -- The paramaterised deductions

  deductions_SERVER_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( Sent.(Encrypt.(SKey__.(a), <b, kab>), <s, a, b, kab>), 
        { Sq.<b, Encrypt.(SKey__.(b), <a>)> })},
      {( Sent.(Encrypt.(SKey__.(b), <a, kab>), <s, a, b, kab>), 
        { Sent.(Encrypt.(SKey__.(a), <b, kab>), <s, a, b, kab>) })},
      {( Sent.(Encrypt.(SKey__.(b), <a, kab>), <s, b, a, kab>), 
        { Sent.(Encrypt.(SKey__.(b), <a, kab>), <s, a, b, kab>) })}
    })

  -- Deductions for internalised SERVER running with honest
  -- agent
  deductions_SERVER_with_honest =
    Union({
      deductions_SERVER_0(a, na, ma, b, s, nb, mb, kab) |
        a <- User, na <- Nonce, ma <- Nonce, b <- User, nb <- Nonce, mb <- Nonce, s <- inter(Server,HONEST), kab <- {kab_S, SessionKey_S}, honest(a) and honest(b)
      })

  -- Deductions for internalised SERVER running with dishonest
  -- agent.
  deductions_SERVER_with_dishonest =
    Union({
      deductions_SERVER_0(a, na, ma, b, s, nb, mb, kab) |
        a <- User, na <- Nonce, ma <- Nonce, b <- User, nb <- Nonce, mb <- Nonce, s <- inter(Server,HONEST), kab <- {SessionKey_P}, not(honest(a) and honest(b))
      })

  -- Deductions for external SERVER running with any agent
  -- These are used to better approximate KnowableFact so as to reduce the
  -- size of LearnableFact.
  deductions_SERVER_external_0(a, na, ma, b, s, nb, mb, kab) =
    Union({
      {( Encrypt.(SKey__.(a), <b, kab>), 
        { Sq.<b, Encrypt.(SKey__.(b), <a>)> })},
      {( Encrypt.(SKey__.(b), <a, kab>), { Encrypt.(SKey__.(a), <b, kab>) })},
      {( Encrypt.(SKey__.(b), <a, kab>), { Encrypt.(SKey__.(b), <a, kab>) })}
    })

  deductions_SERVER_external = 
    Union({
      deductions_SERVER_external_0(a, na, ma, b, s, nb, mb, kab) | 
        a <- User, na <- Nonce, ma <- Nonce, b <- User, nb <- Nonce, mb <- Nonce, s <- {}, kab <- {}
    })

  All_Internal_Deductions = 
    Union({
      deductions_INITIATOR_with_honest,
      deductions_RESPONDER_with_honest,
      deductions_SERVER_with_honest,
      deductions_INITIATOR_with_dishonest,
      deductions_RESPONDER_with_dishonest,
      deductions_SERVER_with_dishonest
    })

  All_External_and_Internal_Deductions_ = 
    Union({
      All_Internal_Deductions,
      deductions_INITIATOR_external,
      deductions_RESPONDER_external,
      deductions_SERVER_external
    })

  All_Deductions = Union({Base_Deductions, All_External_and_Internal_Deductions})

  UserDeductions = {}

  FnAppDeductions = {}

  -- close up intruder's initial knowledge under deductions;
  -- calculate which facts cannot be learnt

  components_(Sq.ms_) = 
    if member(Sq.ms_, Fact_1) then {Sq.ms_} else set(ms_)
  components_(m_) = {m_}

  Seeable_ = 
    Union({unknown_(components_(m_)) | (_,m_,_,_) <- SYSTEM_M::INT_MSG_INFO})

  -- The intruder

  -- * leak is used to signal that a possible secret has been learnt
  -- * hear and say are used to represent hearing or saying a message
  -- * infer(f,fs) represent deducing fact f from the set of facts fs

  -- Component of intruder for currently unknown fact f_:
  -- * ms_ is the set of messages that contain f_ at the top level
  -- * fss_ is the set of sets of facts from which f_ can be deduced
  -- * ds_ is the set of deductions that use f_

  IGNORANT(f_,ms_,fss_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,ds_)
    []
    ([] fs_ : fss_, not(member(f_,fs_)) @ 
        infer.(f_,fs_) -> KNOWS(f_,ms_,ds_))

  -- Component of intruder for known fact f_

  KNOWS(f_,ms_,ds_) =
    hear?m_:ms_ -> KNOWS(f_,ms_,ds_)
    []
    say?m_:ms_ -> KNOWS(f_,ms_,ds_)
    [] 
    ([] ded@@(f1_,fs_) : ds_, f1_!=f_ @ infer.ded -> KNOWS(f_,ms_,ds_))
    []
    member(f_,ALL_SECRETS) & leak.f_ -> KNOWS(f_,ms_,ds_)

  -- Alphabet of this component

  AlphaL(f_,ms_,fss_,ds_) =
    Union({(if member(f_,ALL_SECRETS) then {leak.f_} else {}),
           {hear.m_, say.m_ | m_ <- ms_},
           {infer.(f_,fs_) | fs_ <- fss_},
           {infer.(f1_,fs_) | (f1_,fs_) <- ds_}
         })

  -- Set of all (f_, ms_, fss_, ds_) for which intruder components 
  -- must be built

  f_ms_fss_ds_s(Deductions,LearnableFact) = 
    let rid_ = relational_image(Deductions)
        msf_ = relational_image({(f_, m_) | m_ <- MSG_BODY, f_ <- unSq_(m_)})
        xsf_ = relational_image({(f_, x_) | x_@@(_,fs_) <- Deductions,
                                            f_ <- fs_})
    within {(f_, msf_(f_), rid_(f_), xsf_(f_)) | f_ <- LearnableFact}

  -- Rename events appropriately

  BUILD_INTRUDER_0(INTRUDER_0) =
    ((chase(INTRUDER_0)
      [[ hear.m_ <- hear.m_, hear.m_ <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1a,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3b,
           SYSTEM_M::DIRECT_MSG3c,
           SYSTEM_M::DIRECT_MSG3d,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6,
           SYSTEM_M::DIRECT_MSG7
         }), 
         A_ <- diff(SenderType(l_),{Mallory}), 
         B_ <- ReceiverType(l_) ]] 
     [|{| hear |}|] STOP)
      [[ say.m_ <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1a,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3b,
           SYSTEM_M::DIRECT_MSG3c,
           SYSTEM_M::DIRECT_MSG3d,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6,
           SYSTEM_M::DIRECT_MSG7
         }), 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 
     [|{| say |}|] STOP)

  -- Add in facts that are known initially

  SAY_KNOWN_0(IK1) = 
    (inter(IK1, ALL_SECRETS) != {} & dummy_leak -> SAY_KNOWN_0(IK1)) 
    [] dummy_send -> SAY_KNOWN_0(IK1) 
    [] dummy_receive -> SAY_KNOWN_0(IK1) 

  SAY_KNOWN(IK1) =
    SAY_KNOWN_0(IK1)
      [[ dummy_leak <- leak.f_ | f_ <- inter(IK1, ALL_SECRETS) ]]
      [[ dummy_send <- dummy_send, dummy_send <- send.A_.B_.(l_,m_,se_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1a,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3b,
           SYSTEM_M::DIRECT_MSG3c,
           SYSTEM_M::DIRECT_MSG3d,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6,
           SYSTEM_M::DIRECT_MSG7
         }), components_(m_) <= IK1, 
         A_ <- diff(SenderType(l_),{Mallory}), 
         B_ <- ReceiverType(l_) ]] 
      [[ dummy_receive <- dummy_receive, dummy_receive <- receive.A_.B_.(l_,m_,re_) | 
         (l_,m_,se_,re_) <- Union({
           SYSTEM_M::DIRECT_MSG1a,
           SYSTEM_M::DIRECT_MSG2,
           SYSTEM_M::DIRECT_MSG3b,
           SYSTEM_M::DIRECT_MSG3c,
           SYSTEM_M::DIRECT_MSG3d,
           SYSTEM_M::DIRECT_MSG5,
           SYSTEM_M::DIRECT_MSG6,
           SYSTEM_M::DIRECT_MSG7
         }), components_(m_) <= IK1, 
         A_ <- SenderType(l_), 
         B_ <- ReceiverType(l_) ]] 

  STOP_SET = { dummy_send, dummy_receive }

exports

  -- Types of sender and receiver of each message

  SenderType (Msg1a) = User
  SenderType (Msg2) = User
  SenderType (Msg3b) = Server
  SenderType (Msg3c) = Server
  SenderType (Msg3d) = Server
  SenderType (Msg5) = User
  SenderType (Msg6) = User
  SenderType (Msg7) = User

  ReceiverType(Msg1a) = User
  ReceiverType(Msg2) = Server
  ReceiverType(Msg3b) = User
  ReceiverType(Msg3c) = User
  ReceiverType(Msg3d) = User
  ReceiverType(Msg5) = User
  ReceiverType(Msg6) = User
  ReceiverType(Msg7) = User

  -- Intruder's initial knowledge

  IK0 = {Mallory, SKey__.(Mallory), Alice, Alice, Bob, Nonce_P, 
             SessionKey_P, Garbage}

  Base_Deductions = Base_Deductions_

  All_External_and_Internal_Deductions =  All_External_and_Internal_Deductions_

  Close_(IK_, ded_, fact_) =
    CloseButNotFacts_(IK_, ded_, fact_, { })

  -- The method below is used to calculate IK1 and Deductions and is important
  -- when authentication checks are being done. If no check was done on f being
  -- in Facts then the infer event corresponding to a signal may be hidden.
  CloseButNotFacts_(IK_, ded_, fact_, signal_facts_) =
    let IK1_ = 
          union(IK_, {f_ | (f_,fs_) <- ded_, fs_ <= IK_ and not member(f_, signal_facts_)})
        ded1_ = 
          {(f_,fs_) | (f_,fs_) <- ded_, not (member(f_,IK_)),
                      fs_ <= fact_}
    within
    if card(IK_)==card(IK1_) and card(ded_)==card(ded1_)
    then (IK_, {(f_,diff(fs_,IK_)) | (f_,fs_) <- ded_})
    else CloseButNotFacts_(IK1_, ded1_, fact_, signal_facts_)

  -- Calculate knowable facts based using the external and internal deductions
  (KnowableFact_, _) = 
    Close_(ALGEBRA_M::applyRenamingToSet(IK0), 
           ALGEBRA_M::applyRenamingToDeductions(All_Deductions), 
           ALGEBRA_M::applyRenamingToSet(Fact_1))

KnowableFact = KnowableFact_ 
  -- Put components together in parallel
  INTRUDER_00(Deductions,LearnableFact) = 
    (|| (f_,ms_,fss_,ds_) : f_ms_fss_ds_s(Deductions,LearnableFact) @ 
         [AlphaL(f_,ms_,fss_,ds_)] IGNORANT(f_,ms_,fss_,ds_))

  -- Set of all deductions that could occur
  COMBINED_DEDUCTIONS =
    let ds_ = 
        Union({
          AUTH1_M::RenamedDeductions,
          AUTH2_M::RenamedDeductions,
          SECRET_M::Deductions
        })
    within -- Don't you hate hacks like this (FDR does not allow empty channel types)?
      if ds_ == {} then {(Garbage, {Garbage})} else ds_

  -- Declare channels:
  channel hear, say : MSG_BODY
  channel dummy_leak, dummy_send, dummy_receive

  -- Complete intruder

  -- Intruder used for temporal specs
  BUILD_INTRUDER'(INTRUDER_0,IK) =
    (BUILD_INTRUDER_0(INTRUDER_0) ||| SAY_KNOWN(IK)) [| STOP_SET |] STOP

endmodule

-- FDR bug: cannot have a module prefix in a channel type
Deductions' = INTRUDER_M::COMBINED_DEDUCTIONS
channel infer : Deductions'

IntruderInterface = 
  Union({
    {| receive.Mallory.A_.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| receive.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::INPUT_MSG1a,
      SYSTEM_M::INPUT_MSG2,
      SYSTEM_M::INPUT_MSG3b,
      SYSTEM_M::INPUT_MSG3c,
      SYSTEM_M::INPUT_MSG3d,
      SYSTEM_M::INPUT_MSG5,
      SYSTEM_M::INPUT_MSG6,
      SYSTEM_M::INPUT_MSG7
    }) |},
    {| send.A_.Mallory.m_ | A_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- {} |},
    {| send.A_.B_.m_ | A_ <- ALL_PRINCIPALS, B_ <- ALL_PRINCIPALS, m_ <- Union({
      SYSTEM_M::OUTPUT_MSG1a,
      SYSTEM_M::OUTPUT_MSG2,
      SYSTEM_M::OUTPUT_MSG3b,
      SYSTEM_M::OUTPUT_MSG3c,
      SYSTEM_M::OUTPUT_MSG3d,
      SYSTEM_M::OUTPUT_MSG5,
      SYSTEM_M::OUTPUT_MSG6,
      SYSTEM_M::OUTPUT_MSG7
    }) |}
  })

-- ************************************************************************
-- *                    Specifications and Assertions                     *
-- ************************************************************************

module SECRET_M

  -- Specification for single secret

  SECRET_SPEC_0(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ ->
      (if member(Mallory, Bs_) then SECRET_SPEC_0(s_)
       else SECRET_SPEC_1(s_))
    []
    leak.s_ -> SECRET_SPEC_0(s_)
  SECRET_SPEC_1(s_) = 
    signal.Claim_Secret?A_!s_?Bs_ -> SECRET_SPEC_1(s_)
  -- Specification for all secrets

  AlphaS(s_) = 
    Union({
      {|signal.Claim_Secret.A_.s_ | A_ <- ALL_PRINCIPALS|},
      {leak.s_}
    })
  -- Sequential version; secs_ is secrets that intruder must not learn

  SEQ_SECRET_SPEC_0(secs_) =
    scs?s_!IntIn -> SEQ_SECRET_SPEC_0(secs_)
    []
    card(secs_)<2 & scs?s_!IntNotIn ->
      SEQ_SECRET_SPEC_0(union(secs_,{s_}))
    []
    card(secs_)==2 & scs?s_:secs_!IntNotIn ->
      SEQ_SECRET_SPEC_0(secs_)
    []
    leak?s_ : diff(ALL_SECRETS,secs_) -> SEQ_SECRET_SPEC_0(secs_)

  isIntIn(S_) = if member(Mallory,S_) then IntIn else IntNotIn

  Alpha_SECRETS =
    Union({
      {|leak, signal.Claim_Secret.A_ | A_ <- HONEST|}
    })

  Alpha_SEQ_SECRETS = 
    Union({
      {|leak, scs|}
    })

exports

  (IK, Deductions) =
   INTRUDER_M::Close_(ALGEBRA_M::applyRenamingToSet(INTRUDER_M::IK0), 
           ALGEBRA_M::applyRenamingToDeductions(INTRUDER_M::Base_Deductions), 
           ALGEBRA_M::applyRenamingToSet(INTRUDER_M::KnowableFact))

  LearnableFact = diff(INTRUDER_M::KnowableFact, IK)

  INTRUDER_0 =
    INTRUDER_M::INTRUDER_00(Deductions,LearnableFact) \ {|infer|}

  SYSTEM =
    SYSTEM_M::SYSTEM_0 [| IntruderInterface |] INTRUDER_M::BUILD_INTRUDER'(INTRUDER_0,IK)

  SECRET_SPEC = (|| s_ : ALL_SECRETS @ [AlphaS(s_)] SECRET_SPEC_0(s_))

  datatype IncInt = IntIn | IntNotIn

  channel scs : ALL_SECRETS.IncInt

  SEQ_SECRET_SPEC = SEQ_SECRET_SPEC_0({})

  -- System for secrecy checking

  SYSTEM_S = 
    let User_renamed_ = ALGEBRA_M::applyRenamingToSet(User)
        SessionKey_renamed_ = ALGEBRA_M::applyRenamingToSet(SessionKey)
        Server_renamed_ = ALGEBRA_M::applyRenamingToSet(Server)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[send.a.b.ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>))
          <- signal.Claim_Secret.a.ALGEBRA_M::applyRenaming(kab).{b, s} |
            a <- User_renamed_, b <- User_renamed_, 
            kab <- SessionKey_renamed_, s <- Server_renamed_, 
            mb <- Nonce_renamed_,
        member(ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>)),SYSTEM_M::OUTPUT_MSG7)
      ]] \ {| env, send, receive |}

  SYSTEM_S_SEQ =
    let User_renamed_ = ALGEBRA_M::applyRenamingToSet(User)
        SessionKey_renamed_ = ALGEBRA_M::applyRenamingToSet(SessionKey)
        Server_renamed_ = ALGEBRA_M::applyRenamingToSet(Server)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
    within
    SYSTEM
      [[send.a.b.ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>))
          <- scs.ALGEBRA_M::applyRenaming(kab).isIntIn({a, b, s}) |
            a <- User_renamed_, b <- User_renamed_, 
            kab <- SessionKey_renamed_, s <- Server_renamed_, 
            mb <- Nonce_renamed_,
        member(ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>)),SYSTEM_M::OUTPUT_MSG7)
      ]] \ {| env, send, receive |}

endmodule

-- Assertion of secrecy

assert SECRET_M::SECRET_SPEC [T= SECRET_M::SYSTEM_S
assert SECRET_M::SEQ_SECRET_SPEC [T= SECRET_M::SYSTEM_S_SEQ

-- ************************************************************************
-- *                    Authentication specifications                     *
-- ************************************************************************

module AUTH_COMMON
  createRenaming(factsRenaming) =
    let rn = relational_image(factsRenaming)
        dom = {a_ | (a_, _) <- factsRenaming}
        extract({x_}) = x_
    within \ x_ @ if member(x_,dom) then extract(rn(x_)) else x_

  -- The first argument is something of type createRenaming(X)
  renameSet(f_, X_) =
    {f_(x_) | x_ <- X_}
  renameDeductions(rn_, ds_) =
    {(rn_(f_), renameSet(rn_, fs_)) | (f_, fs_) <- ds_}

exports
  -- Given a set of pairs (f, f') first compute the closure (but excluding
  -- any facts in factsToRename) of the intruder's initial knowledge and then
  -- rename all facts that appear in Deductions and LearnableFact.
  RenameClosure(factsRenaming,factsToRename) = 
    let
      rn_ = createRenaming(factsRenaming)
      (IK_,ded_) =
        INTRUDER_M::CloseButNotFacts_(
          ALGEBRA_M::applyRenamingToSet(INTRUDER_M::IK0),
          ALGEBRA_M::applyRenamingToDeductions(INTRUDER_M::Base_Deductions),
          ALGEBRA_M::applyRenamingToSet(INTRUDER_M::KnowableFact),
          factsToRename)
      learnableFact = diff(INTRUDER_M::KnowableFact,IK_)
    within
      (renameDeductions(rn_,ded_), IK_, renameSet(rn_,learnableFact))

  -- System to be used for checking authentication specifications
  AUTH_SYSTEM(INTRUDER_0,IK) = 
    SYSTEM_M::SYSTEM_0
    [| IntruderInterface |] INTRUDER_M::BUILD_INTRUDER'(INTRUDER_0,IK)

endmodule

-- ************************************************************************
-- *                 Authentication specification number 1                *
-- ************************************************************************

module AUTH1_M

  -- Set of all facts that would be renamed to signals in infer events
  FACTS_TO_RENAME = 
    {Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) | 
      Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- INTRUDER_M::KnowableFact}

  -- Set of tuples of the form (Fact, RunningFact) that is used to create a
  -- renaming function of type Fact -> RunningFact.
  FACT_RENAMING =
    Union({
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals1.TRunning1.b.a.kab.Internal)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        not((member(ma,{ma_E1})) or (member(ma,{ma_E2})))},
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals1.TRunning1.b.a.kab.External1)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        member(ma,{ma_E1})},
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals1.TRunning1.b.a.kab.External2)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        member(ma,{ma_E2})}
    })

  (RenamedDeductions_,IK,RenamedLearnableFact) =
    AUTH_COMMON::RenameClosure(FACT_RENAMING,FACTS_TO_RENAME)

  -- Build the basic (non-chased) intruder by renaming all the infer.(f,fs)
  -- events corresponding to the messages that should be renamed.
  INTRUDER_0 = 
    INTRUDER_M::INTRUDER_00(RenamedDeductions,RenamedLearnableFact)
      [[infer.(AuthTaggedSignals1.TRunning1.b.a.kab.tag_,fs_) <-
         signal.Running1.RESPONDER_role.b.a.kab
        | (AuthTaggedSignals1.TRunning1.b.a.kab.tag_, fs_) <- RenamedDeductions,
          member(b,inter(User,HONEST)), member(a, {Bob})
      ]] \ {|infer|}

exports
  RenamedDeductions = RenamedDeductions_

  -- Datatypes below are what facts are renamed in in FACT_RENAMING above
  datatype Tag1 = Internal | External1 | External2
  datatype TaggedSignals1 = TRunning1.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey.Tag1

  -- Specs for all agents being authenticated

  AuthenticateRESPONDERToINITIATORNonInjectiveAgreement_kab =
    let
      bInstance(a, na, ma) =
        signal.Running1.RESPONDER_role?b : inter(User,HONEST)!a?kab : {kab_S, SessionKey_S} ->
          RUN({signal.Commit1.INITIATOR_role.a.b.kab})
      run(a, na, ma) = 
        signal.Running1.RESPONDER_role?b : inter(User,HONEST)!a?kab -> 
        run(a, na, ma)
    within
      -- Number argument tuples so that duplicates are not eliminated
      ||| (_,a, na, ma): {(1, Bob, Nonce_P, ma_E1), (2, Bob, Nonce_P, ma_E2)} @
        sbisim(bInstance(a, na, ma)) ||| run(a, na, ma)

  -- System for authentication checking

  SYSTEM_1 =
    let User_renamed_ = ALGEBRA_M::applyRenamingToSet(User)
        SessionKey_renamed_ = ALGEBRA_M::applyRenamingToSet(SessionKey)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
        Server_renamed_ = ALGEBRA_M::applyRenamingToSet(Server)
    within
      AUTH_COMMON::AUTH_SYSTEM(INTRUDER_0,IK)
       [[send.b.a.ALGEBRA_M::rmb((Msg6, Sq.<mb, Encrypt.(kab, <ma>)>, <kab>)) <-
          signal.Running1.RESPONDER_role.b.a.kab,  
        send.a.b.ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>)) <-
          signal.Commit1.INITIATOR_role.a.b.kab |
            b <- User_renamed_, a <- User_renamed_, 
            kab <- SessionKey_renamed_, ma <- Nonce_renamed_, 
            mb <- Nonce_renamed_, s <- Server_renamed_,
            member(b,HONEST),
            member((Msg6, Sq.<mb, Encrypt.(kab, <ma>)>, <kab>),SYSTEM_M::OUTPUT_MSG6),
            member((Msg7, Encrypt.(kab, <mb>), <kab, s>),SYSTEM_M::OUTPUT_MSG7)
      ]]
      \ {| env, leak, send, receive|}

endmodule

assert AUTH1_M::AuthenticateRESPONDERToINITIATORNonInjectiveAgreement_kab [T= 
       AUTH1_M::SYSTEM_1

-- ************************************************************************
-- *                 Authentication specification number 2                *
-- ************************************************************************

module AUTH2_M

  -- Set of all facts that would be renamed to signals in infer events
  FACTS_TO_RENAME = 
    {Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) | 
      Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- INTRUDER_M::KnowableFact}

  -- Set of tuples of the form (Fact, RunningFact) that is used to create a
  -- renaming function of type Fact -> RunningFact.
  FACT_RENAMING =
    Union({
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals2.TRunning2.b.a.kab.Internal)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        not((member(ma,{ma_E1})) or (member(ma,{ma_E2})))},
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals2.TRunning2.b.a.kab.External1)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        member(ma,{ma_E1})},
      {(Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>), AuthTaggedSignals2.TRunning2.b.a.kab.External2)
      | Sent.(Sq.<mb, Encrypt.(kab, <ma>)>, <b, a, s, kab_2_, ma_2_, mb_2_>) <- FACTS_TO_RENAME,
        kab_2_ == kab, ma_2_ == ma, mb_2_ == mb,
        member(ma,{ma_E2})}
    })

  (RenamedDeductions_,IK,RenamedLearnableFact) =
    AUTH_COMMON::RenameClosure(FACT_RENAMING,FACTS_TO_RENAME)

  -- Build the basic (non-chased) intruder by renaming all the infer.(f,fs)
  -- events corresponding to the messages that should be renamed.
  INTRUDER_0 = 
    INTRUDER_M::INTRUDER_00(RenamedDeductions,RenamedLearnableFact)
      [[infer.(AuthTaggedSignals2.TRunning2.b.a.kab.tag_,fs_) <-
         signal.Running2.RESPONDER_role.b.a.kab
        | (AuthTaggedSignals2.TRunning2.b.a.kab.tag_, fs_) <- RenamedDeductions,
          member(b,inter(User,HONEST)), member(a, {Bob})
      ]] \ {|infer|}

exports
  RenamedDeductions = RenamedDeductions_

  -- Datatypes below are what facts are renamed in in FACT_RENAMING above
  datatype Tag2 = Internal | External1 | External2
  datatype TaggedSignals2 = TRunning2.ALL_PRINCIPALS.ALL_PRINCIPALS.SessionKey.Tag2

  -- Specs for all agents being authenticated

  AuthenticateRESPONDERToINITIATORAgreement_kab =
    let
      bInstance(a, na, ma) =
        signal.Running2.RESPONDER_role?b : inter(User,HONEST)!a?kab : {kab_S, SessionKey_S} ->
          signal.Commit2.INITIATOR_role.a.b.kab -> STOP
      run(a, na, ma) = 
        signal.Running2.RESPONDER_role?b : inter(User,HONEST)!a?kab -> 
        run(a, na, ma)
    within
      -- Number argument tuples so that duplicates are not eliminated
      ||| (_,a, na, ma): {(1, Bob, Nonce_P, ma_E1), (2, Bob, Nonce_P, ma_E2)} @
        sbisim(bInstance(a, na, ma)) ||| run(a, na, ma)

  -- System for authentication checking

  SYSTEM_2 =
    let User_renamed_ = ALGEBRA_M::applyRenamingToSet(User)
        SessionKey_renamed_ = ALGEBRA_M::applyRenamingToSet(SessionKey)
        Nonce_renamed_ = ALGEBRA_M::applyRenamingToSet(Nonce)
        Server_renamed_ = ALGEBRA_M::applyRenamingToSet(Server)
    within
      AUTH_COMMON::AUTH_SYSTEM(INTRUDER_0,IK)
       [[send.b.a.ALGEBRA_M::rmb((Msg6, Sq.<mb, Encrypt.(kab, <ma>)>, <kab>)) <-
          signal.Running2.RESPONDER_role.b.a.kab,  
        send.a.b.ALGEBRA_M::rmb((Msg7, Encrypt.(kab, <mb>), <kab, s>)) <-
          signal.Commit2.INITIATOR_role.a.b.kab |
            b <- User_renamed_, a <- User_renamed_, 
            kab <- SessionKey_renamed_, ma <- Nonce_renamed_, 
            mb <- Nonce_renamed_, s <- Server_renamed_,
            member(b,HONEST),
            member((Msg6, Sq.<mb, Encrypt.(kab, <ma>)>, <kab>),SYSTEM_M::OUTPUT_MSG6),
            member((Msg7, Encrypt.(kab, <mb>), <kab, s>),SYSTEM_M::OUTPUT_MSG7)
      ]]
      \ {| env, leak, send, receive|}

endmodule

assert AUTH2_M::AuthenticateRESPONDERToINITIATORAgreement_kab [T= 
       AUTH2_M::SYSTEM_2

